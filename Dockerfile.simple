# Etapa de construcción
FROM node:18-bullseye AS builder
WORKDIR /app
COPY package*.json ./
COPY tsconfig.json ./
RUN npm ci --ignore-scripts --no-audit
COPY src/ ./src/
COPY frontend/ ./frontend/
RUN npm run build
RUN cd frontend && npm ci --ignore-scripts --no-audit && npm run build

# Etapa de producción
FROM node:18-bullseye
RUN apt-get update && apt-get install -y postgresql-client wget && apt-get clean
RUN groupadd -r nodejs && useradd -r -g nodejs nodejs
WORKDIR /app
RUN mkdir -p /app/uploads /app/logs && chown -R nodejs:nodejs /app

# Copiar archivos
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist
COPY --from=builder --chown=nodejs:nodejs /app/frontend/dist ./frontend/dist
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --chown=nodejs:nodejs package*.json ./

# Variables PostgreSQL
ENV NODE_ENV=production
ENV PORT=3000
ENV DB_TYPE=postgres
ENV DB_HOST=telehost_chatwaba
ENV DB_PORT=5432
ENV DB_USERNAME=postgres
ENV DB_PASSWORD=9ad22d8eb9a3fd48f227
ENV DB_DATABASE=telehost
ENV DATABASE_URL=postgresql://postgres:9ad22d8eb9a3fd48f227@telehost_chatwaba:5432/telehost

EXPOSE 3000
USER nodejs

# Comando directo sin scripts externos
CMD ["sh", "-c", "until pg_isready -h $DB_HOST -p $DB_PORT -U $DB_USERNAME; do echo 'Waiting for PostgreSQL...'; sleep 2; done && echo 'PostgreSQL ready!' && node dist/main"] 