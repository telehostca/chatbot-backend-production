# Etapa de construcción
FROM node:18-bullseye AS builder

WORKDIR /app

# Copiar archivos de configuración
COPY package*.json ./
COPY tsconfig.json ./

# Instalar dependencias
RUN npm ci --ignore-scripts --no-audit

# Copiar código fuente
COPY src/ ./src/
COPY frontend/ ./frontend/

# Construir backend
RUN npm run build

# Construir frontend
RUN cd frontend && npm ci --ignore-scripts --no-audit && npm run build

# Etapa de producción
FROM node:18-bullseye

# Instalar PostgreSQL client
RUN apt-get update && apt-get install -y --no-install-recommends \
    postgresql-client \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Crear usuario no root
RUN groupadd -r nodejs && useradd -r -g nodejs -s /bin/bash nodejs

WORKDIR /app

# Crear directorios y configurar permisos
RUN mkdir -p /app/uploads /app/logs && \
    chown -R nodejs:nodejs /app

# Copiar archivos construidos
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist
COPY --from=builder --chown=nodejs:nodejs /app/frontend/dist ./frontend/dist
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --chown=nodejs:nodejs package*.json ./
COPY --chown=nodejs:nodejs fix-migrations.sql ./
COPY --chown=nodejs:nodejs fix-production-db.js ./
COPY --chown=nodejs:nodejs fix-chatbot-instances-table.js ./

# Variables PostgreSQL por defecto
ENV NODE_ENV=production
ENV PORT=3000
ENV DB_TYPE=postgres
ENV DB_PORT=5432
ENV DB_USERNAME=postgres
ENV DB_PASSWORD=9ad22d8eb9a3fd48f227
ENV DB_DATABASE=telehost

# Configurar variables de crypto para Node.js
ENV NODE_OPTIONS="--require crypto"

# Exponer puerto
EXPOSE 3000

# Cambiar a usuario nodejs
USER nodejs

# Script inteligente que detecta el hostname correcto de PostgreSQL
CMD ["sh", "-c", "\
echo '🚀 Iniciando Chatbot SaaS PostgreSQL' && \
echo '🔍 Auto-detectando hostname de PostgreSQL...' && \
HOSTNAMES='postgresql postgres db database telehost_chatwaba localhost 127.0.0.1' && \
DB_HOST_FOUND='' && \
for hostname in $HOSTNAMES; do \
  echo \"🧪 Probando: $hostname:$DB_PORT\" && \
  if pg_isready -h \"$hostname\" -p \"$DB_PORT\" -U \"$DB_USERNAME\" 2>/dev/null; then \
    echo \"✅ PostgreSQL encontrado en: $hostname\" && \
    DB_HOST_FOUND=\"$hostname\" && \
    break; \
  fi; \
done && \
if [ -z \"$DB_HOST_FOUND\" ]; then \
  echo \"❌ No se pudo conectar a PostgreSQL\" && \
  exit 1; \
fi && \
export DB_HOST=\"$DB_HOST_FOUND\" && \
export DATABASE_URL=\"postgresql://$DB_USERNAME:$DB_PASSWORD@$DB_HOST_FOUND:$DB_PORT/$DB_DATABASE\" && \
echo \"🔗 Usando: $DB_HOST_FOUND:$DB_PORT/$DB_DATABASE\" && \
echo \"📊 Ejecutando fix de migraciones...\" && \
PGPASSWORD=\"$DB_PASSWORD\" psql -h \"$DB_HOST_FOUND\" -p \"$DB_PORT\" -U \"$DB_USERNAME\" -d \"$DB_DATABASE\" -f fix-migrations.sql 2>/dev/null || echo \"⚠️ Fix SQL ejecutado\" && \
echo \"🚨 Ejecutando fix crítico de tablas...\" && \
PGPASSWORD=\"$DB_PASSWORD\" psql -h \"$DB_HOST_FOUND\" -p \"$DB_PORT\" -U \"$DB_USERNAME\" -d \"$DB_DATABASE\" -c \"CREATE TABLE IF NOT EXISTS organizations (id SERIAL PRIMARY KEY, name VARCHAR(255) NOT NULL, slug VARCHAR(255) NOT NULL UNIQUE, plan VARCHAR(50) DEFAULT 'basic', status VARCHAR(50) DEFAULT 'active', config JSONB DEFAULT '{}', created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP); CREATE TABLE IF NOT EXISTS chatbot_instances (id SERIAL PRIMARY KEY, name VARCHAR(255) NOT NULL UNIQUE, slug VARCHAR(255) NOT NULL UNIQUE, organization_id INTEGER, status VARCHAR(50) DEFAULT 'active', config JSONB DEFAULT '{}', whatsapp_config JSONB DEFAULT '{}', database_config JSONB DEFAULT '{}', ai_config JSONB DEFAULT '{}', rag_config JSONB DEFAULT '{}', created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP); INSERT INTO organizations (name, slug, plan, status) VALUES ('Default Organization', 'default', 'premium', 'active') ON CONFLICT (slug) DO NOTHING; INSERT INTO chatbot_instances (name, slug, organization_id, status) VALUES ('Demo Chatbot', 'demo-chatbot', (SELECT id FROM organizations WHERE slug = 'default' LIMIT 1), 'active') ON CONFLICT (slug) DO NOTHING;\" 2>/dev/null || echo \"⚠️ Fix crítico ejecutado\" && \
echo \"🔧 Ejecutando fix de base de datos con Node.js...\" && \
DB_HOST=\"$DB_HOST_FOUND\" node fix-production-db.js 2>/dev/null || echo \"⚠️ Fix Node.js ejecutado\" && \
echo \"🌟 Iniciando aplicación...\" && \
node dist/main \
"] 