import { Injectable, Logger, Inject, forwardRef } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import axios from 'axios';
import { DatabaseMapperService } from './database-mapper.service';
import { PersistentSession } from '../../chat/entities/persistent-session.entity';
import { ChatService } from '../../chat/chat.service';

@Injectable()
export class GenericChatbotService {
  private readonly logger = new Logger(GenericChatbotService.name);

  constructor(
    private readonly databaseMapperService: DatabaseMapperService,
    @InjectRepository(PersistentSession, 'users')
    private persistentSessionRepository: Repository<PersistentSession>,
    @Inject(forwardRef(() => ChatService))
    private chatService: ChatService,
  ) {}

  /**
   * Servicio gen√©rico SaaS multi-tenant
   * Lee TODA la configuraci√≥n desde la base de datos
   * Soporta todos los tipos: B√°sico, E-commerce, Servicio al Cliente, Informativo, Leads
   * NUEVA FUNCIONALIDAD: Integraci√≥n con IA para respuestas naturales + Base de Datos Externa
   */

  async handleMessage(message: string, from: string, chatbotConfig: any, chatbotId?: string): Promise<string> {
    this.logger.log(`ü§ñ [VERSI√ìN ACTUALIZADA] Chatbot gen√©rico procesando mensaje: ${message} de ${from}`);

    try {
      // üî• SIMPLIFICADO TEMPORALMENTE - Respuesta b√°sica primero para debug
      this.logger.log(`üîç Configuraci√≥n recibida:`, chatbotConfig);
      
      // Respuesta b√°sica funcional
      const basicResponses = [
        "¬°Hola! Gracias por contactarnos. ¬øEn qu√© puedo ayudarte?",
        "Hola, estoy aqu√≠ para asistirte. ¬øCu√°l es tu consulta?",
        "¬°Saludos! ¬øNecesitas informaci√≥n sobre nuestros servicios?",
        "Hola, soy tu asistente virtual. ¬øC√≥mo puedo ayudarte hoy?"
      ];
      
      const randomResponse = basicResponses[Math.floor(Math.random() * basicResponses.length)];
      this.logger.log(`‚úÖ Respuesta b√°sica generada exitosamente`);
      
      return randomResponse;

    } catch (error) {
      this.logger.error(`‚ùå Error en chatbot gen√©rico: ${error.message}`);
      return this.getGenericErrorResponse();
    }
  }

  /**
   * NUEVA FUNCI√ìN MEJORADA: Decidir si usar IA basado en complejidad del mensaje
   */
  private shouldUseAI(message: string, intent: string, config: any): boolean {
    this.logger.log(`üîç Analizando si usar IA para: "${message}" (intent: ${intent})`);
    
    // L√ìGICA CORREGIDA: Priorizar IA para preguntas complejas INDEPENDIENTEMENTE de templates
    
    // 1. PRIMERO Y M√ÅS IMPORTANTE: Analizar complejidad del mensaje
    const complexityIndicators = [
      // Preguntas filos√≥ficas o complejas
      'por qu√©', 'c√≥mo funciona', 'explica', 'cu√°l es', 'qu√© significa',
      'diferencia', 'ventaja', 'recomendaci√≥n', 'consejo', 'opinas',
      'sentido', 'mejor', 'comparar', 'evaluar', 'an√°lisis', 'detalladamente',
      'principios', 'fundamentos', 'teor√≠a',
      
      // Preguntas m√©dicas espec√≠ficas y complejas
      'me duele', 'tengo s√≠ntomas', 'me siento', 'dolor de', 'fiebre',
      'recomiendas', 'qu√© tomar', 'es bueno para', 'efectos',
      'desde hace', 'qu√© hacer', 'c√≥mo tratar', 'tengo diabetes',
      'hipertensi√≥n', 'interfiera', 'analg√©sico', 'tipo 2', 'metformina',
      'enalapril', 'tratamiento actual',
      
      // Preguntas de negocio complejas
      'competencia', 'servicio', 'calidad', 'proceso', 'm√©todo',
      'estrategia', 'experiencia', 'garant√≠a', 'beneficio'
    ];

    const hasComplexityIndicators = complexityIndicators.some(indicator => 
      message.toLowerCase().includes(indicator)
    );

    // ‚≠ê NUEVA L√ìGICA: Priorizar IA para consultas de productos
    const productKeywords = ['tienen', 'busco', 'necesito', 'precio', 'disponible', 'stock', 'harina', 'aceite', 'az√∫car', 'leche', 'marca'];
    const hasProductKeywords = productKeywords.some(keyword => 
      message.toLowerCase().includes(keyword)
    );
    
    // Usar IA si: es larga (>30 chars) O tiene indicadores de complejidad O menciona productos
    const isComplexQuestion = message.length > 30 || hasComplexityIndicators || hasProductKeywords;

    // ‚úÖ NUEVA L√ìGICA: Si es compleja, SIEMPRE usar IA (ignorar templates)
    if (isComplexQuestion) {
      this.logger.log(`üß† PREGUNTA COMPLEJA DETECTADA ‚Üí FORZAR IA`);
      this.logger.log(`   üìè Longitud: ${message.length} chars`);
      this.logger.log(`   üîç Indicadores: ${hasComplexityIndicators}`);
      this.logger.log(`   üéØ Decisi√≥n: IA (ignorando templates)`);
      return true;
    }

    // 2. SOLO para preguntas simples: usar templates
    const responses = config.responses || {};
    
    // Si es un intent espec√≠fico (no default) y tiene respuesta configurada, usar template
    if (intent !== 'default' && responses[intent]) {
      this.logger.log(`üìã Pregunta simple con intent espec√≠fico: ${intent} ‚Üí TEMPLATE`);
      return false;
    }

    // Para preguntas simples sin intent espec√≠fico, usar respuesta default si existe
    if (responses.default) {
      this.logger.log(`üìã Pregunta simple, usando respuesta default ‚Üí TEMPLATE`);
      return false;
    }

    // Si no hay respuesta default, usar IA
    this.logger.log(`ü§ñ No hay respuesta configurada ‚Üí IA`);
    return true;
  }

  /**
   * NUEVA FUNCI√ìN: Generar respuesta usando IA
   */
  private async generateAIResponse(message: string, from: string, chatbotConfig: any, config: any, chatbotId?: string): Promise<string> {
    try {
      // Extraer configuraci√≥n de IA
      const aiConfig = this.extractAIConfiguration(chatbotConfig);
      
      // ‚úÖ PRIORIZAR DEEPSEEK CON VARIABLE DE ENTORNO SI NO HAY API KEY
      if (!aiConfig || !aiConfig.provider || (!aiConfig.apiKey && aiConfig.provider !== 'deepseek')) {
        this.logger.warn(`‚ö†Ô∏è No hay configuraci√≥n de IA v√°lida para proveedor: ${aiConfig?.provider || 'sin proveedor'}`);
        return this.getGenericResponseByType(config.type || 'basic', 'default');
      }

      // Si es DeepSeek y no hay API key, usar la variable de entorno
      if (aiConfig.provider === 'deepseek' && !aiConfig.apiKey) {
        aiConfig.apiKey = process.env.DEEPSEEK_API_KEY;
        this.logger.log(`üîë Usando API key de DeepSeek desde variable de entorno`);
      }

      this.logger.log(`üß† Usando IA: ${aiConfig.provider} (${aiConfig.model})`);

      // Generar contexto para la IA (incluyendo contexto de BD externa)
      // Usar chatbotId del par√°metro, si no est√° disponible, extraer del config
      const finalChatbotId = chatbotId || chatbotConfig?.id || chatbotConfig?.chatbotId;
      const systemPrompt = this.buildSystemPrompt(config, aiConfig, finalChatbotId);
      const userPrompt = `Usuario: ${message}`;

      // Llamar a la IA seg√∫n el proveedor
      const aiResponse = await this.callAIProvider(aiConfig, systemPrompt, userPrompt);
      
      this.logger.log(`‚úÖ Respuesta generada por IA exitosamente`);
      
      // ‚ú® NUEVA L√ìGICA: Detectar si la IA solicita consultar productos
      if (aiResponse.includes('**EJECUTAR_CONSULTA_PRODUCTO:**')) {
        this.logger.log(`üîç IA solicit√≥ consulta de producto, procesando...`);
        return await this.processProductQuery(aiResponse, finalChatbotId);
      }
      
      return aiResponse;

    } catch (error) {
      this.logger.error(`‚ùå Error generando respuesta con IA: ${error.message}`);
      return this.getGenericResponseByType(config.type || 'basic', 'default');
    }
  }

  /**
   * NUEVA FUNCI√ìN: Procesar consulta de producto
   */
  private async processProductQuery(aiResponse: string, chatbotId: string): Promise<string> {
    try {
      // Extraer producto y marca de la respuesta de la IA
      const productMatch = aiResponse.match(/- Producto:\s*(.+)/);
      const brandMatch = aiResponse.match(/- Marca:\s*(.+)/);
      
      if (!productMatch) {
        this.logger.error('‚ùå No se pudo extraer el producto de la respuesta de IA');
        return aiResponse.replace('**EJECUTAR_CONSULTA_PRODUCTO:**', '').replace(/- Producto:.*\n?/g, '').replace(/- Marca:.*\n?/g, '').trim();
      }
      
      const producto = productMatch[1].trim();
      const marca = brandMatch && brandMatch[1].trim() !== 'null' ? brandMatch[1].trim() : null;
      
      this.logger.log(`üîç Ejecutando consulta: Producto="${producto}", Marca="${marca}"`);
      
      // Determinar tipo de consulta seg√∫n el t√©rmino
      const queryType = this.databaseMapperService.determineQueryType(producto);
      
      // Ejecutar consulta en la base de datos
      const queryResult = await this.databaseMapperService.executeQuery(chatbotId, queryType, {
        consulta: producto,
        marca: marca
      });
      
      if (queryResult.success && queryResult.data && queryResult.data.length > 0) {
        // Formatear resultados para el usuario
        const formattedResponse = await this.databaseMapperService.formatProductResults(
          queryResult.data, 
          producto, 
          38.5 // Tasa del d√≥lar por defecto
        );
        
        // Combinar respuesta inicial de IA (sin la parte t√©cnica) con los resultados
        const cleanAiResponse = aiResponse.split('**EJECUTAR_CONSULTA_PRODUCTO:**')[0].trim();
        return `${cleanAiResponse}\n\n${formattedResponse}`;
      } else {
        // No se encontraron productos
        const noResultsMessage = `üòî Disculpa, no encontr√© "${producto}" disponible en este momento. ¬øDeseas probar otra marca o presentaci√≥n?`;
        const cleanAiResponse = aiResponse.split('**EJECUTAR_CONSULTA_PRODUCTO:**')[0].trim();
        return `${cleanAiResponse}\n\n${noResultsMessage}`;
      }
      
    } catch (error) {
      this.logger.error(`‚ùå Error procesando consulta de producto: ${error.message}`);
      // Retornar respuesta de IA sin la parte t√©cnica
      return aiResponse.replace('**EJECUTAR_CONSULTA_PRODUCTO:**', '').replace(/- Producto:.*\n?/g, '').replace(/- Marca:.*\n?/g, '').trim();
    }
  }

  /**
   * NUEVA FUNCI√ìN: Extraer configuraci√≥n de IA
   */
  private extractAIConfiguration(chatbotConfig: any): any {
    try {
      // Prioridad 1: aiConfig directo
      if (chatbotConfig?.aiConfig) {
        const aiConfig = typeof chatbotConfig.aiConfig === 'string'
          ? JSON.parse(chatbotConfig.aiConfig)
          : chatbotConfig.aiConfig;
        
        if (aiConfig?.provider) {
          this.logger.log(`üîß Configuraci√≥n de IA encontrada en aiConfig: ${aiConfig.provider}`);
          return aiConfig;
        }
      }

      // Prioridad 2: desde chatbotConfig anidado
      if (chatbotConfig?.chatbotConfig) {
        const nestedConfig = typeof chatbotConfig.chatbotConfig === 'string'
          ? JSON.parse(chatbotConfig.chatbotConfig)
          : chatbotConfig.chatbotConfig;
        
        if (nestedConfig?.aiConfig?.provider) {
          this.logger.log(`üîß Configuraci√≥n de IA encontrada en chatbotConfig.aiConfig: ${nestedConfig.aiConfig.provider}`);
          return nestedConfig.aiConfig;
        }
      }

      // Prioridad 3: en el nivel ra√≠z del chatbotConfig
      if (chatbotConfig?.aiProvider) {
        const rootConfig = {
          provider: chatbotConfig.aiProvider,
          model: chatbotConfig.aiModel || 'deepseek-chat',
          apiKey: chatbotConfig.aiApiKey || '',
          temperature: chatbotConfig.temperature || 0.7
        };
        
        this.logger.log(`üîß Configuraci√≥n de IA encontrada en nivel ra√≠z: ${rootConfig.provider}`);
        return rootConfig;
      }

      this.logger.warn(`‚ö†Ô∏è No se encontr√≥ configuraci√≥n de IA`);
      return null;
    } catch (error) {
      this.logger.error(`‚ùå Error extrayendo configuraci√≥n de IA: ${error.message}`);
      return null;
    }
  }

    /**
   * NUEVA FUNCI√ìN MEJORADA: Construir prompt del sistema para conversaciones humanas + BD Externa
   */
  private buildSystemPrompt(config: any, aiConfig: any, chatbotId?: string): string {
    const companyName = config.companyName || 'Nuestra empresa';
    const botName = config.botName || 'Asistente';
    const chatbotType = config.type || 'basic';

    // BASE: Personalidad humana y natural
    let systemPrompt = `Eres ${botName}, un asistente virtual de ${companyName}. 

üéØ PRINCIPIOS DE CONVERSACI√ìN HUMANA:
- C√©ntrate completamente en ayudar al usuario
- NO vayas de experto, mant√©n una mentalidad abierta y humilde
- Usa preguntas abiertas para entender mejor las necesidades
- Deja que la conversaci√≥n fluya naturalmente
- Si no sabes algo, recon√≥celo honestamente
- NO compares experiencias del usuario con otras
- No te repitas, di las cosas una sola vez
- Omite detalles t√©cnicos innecesarios
- ESCUCHA para entender, no para contestar
- S√© breve y conciso pero amable

üí¨ ESTILO CONVERSACIONAL:
- Habla como una persona real, no como un robot
- Muestra inter√©s genuino en lo que dice el usuario
- Haz preguntas abiertas: "¬øC√≥mo te sientes con eso?" en lugar de "¬øTienes miedo?"
- Adapta tu tono seg√∫n el tipo de consulta
- Mant√©n el hilo de la conversaci√≥n
- Si el usuario cambia de tema, s√≠guelo naturalmente`;

    // Contexto espec√≠fico seg√∫n el tipo de chatbot
    const conversationalContext = {
      basic: `
Tu papel: Eres un asistente amigable que ayuda con consultas generales.
Tono: Profesional pero c√°lido, como un buen amigo que sabe del tema.
Enfoque: Escucha activamente y ayuda a clarificar lo que realmente necesita el usuario.`,
      
      ecommerce: `
Tu papel: Eres un consultor de ventas experimentado pero sin presi√≥n.
Tono: Entusiasta pero respetuoso, nunca agresivo en ventas.
Enfoque: Ayuda al usuario a encontrar lo que realmente necesita, no lo que m√°s cuesta.
- Haz preguntas abiertas sobre sus necesidades: "¬øPara qu√© lo vas a usar principalmente?"
- Sugiere alternativas cuando sea apropiado
- Explica beneficios reales, no caracter√≠sticas t√©cnicas`,
      
      customer_service: `
Tu papel: Eres un especialista en atenci√≥n al cliente emp√°tico y competente.
Tono: Comprensivo, paciente y orientado a soluciones.
Enfoque: Escucha el problema completo antes de sugerir soluciones.
- Valida los sentimientos: "Entiendo que esto debe ser frustrante"
- Ofrece soluciones paso a paso
- Pregunta si la soluci√≥n funciona antes de dar m√°s opciones`,
      
      informative: `
Tu papel: Eres un educador que hace complejo simple.
Tono: Did√°ctico pero accesible, como un profesor favorito.
Enfoque: Explica conceptos de forma que cualquiera pueda entender.
- Usa analog√≠as y ejemplos reales
- Verifica comprensi√≥n: "¬øTe queda claro esto hasta aqu√≠?"
- Construye conocimiento paso a paso`,
      
      leads: `
Tu papel: Eres un consultor que identifica necesidades reales.
Tono: Consultivo, no vendedor, genuinamente interesado en ayudar.
Enfoque: Haz las preguntas correctas para entender el contexto completo.
- "¬øQu√© te llev√≥ a buscar esta soluci√≥n?"
- "¬øC√≥mo imaginas que esto cambiar√≠a tu situaci√≥n?"
- Ofrece valor antes que vender`
    };

    systemPrompt += (conversationalContext[chatbotType] || conversationalContext.basic);

    // Informaci√≥n de contacto de manera natural
    let contactInfo = `

üìû INFORMACI√ìN DE CONTACTO:`;
    if (config.contactPhone) {
      contactInfo += `
Tel√©fono: ${config.contactPhone}`;
    }
    if (config.contactEmail) {
      contactInfo += `
Email: ${config.contactEmail}`;
    }
    if (config.address) {
      contactInfo += `
Ubicaci√≥n: ${config.address}`;
    }

    systemPrompt += contactInfo;

    // ‚ú® NUEVO: Agregar contexto de base de datos externa si est√° disponible
    if (chatbotId) {
      try {
        const databaseContext = this.databaseMapperService.generateAgentContext(chatbotId);
        if (databaseContext && databaseContext !== "No hay configuraci√≥n de base de datos externa disponible.") {
          this.logger.log(`üóÑÔ∏è Incluyendo contexto de base de datos para chatbot ${chatbotId}`);
          systemPrompt += `

üóÑÔ∏è INFORMACI√ìN DE BASE DE DATOS DISPONIBLE:
${databaseContext}

üìã INSTRUCCIONES ESPECIALES PARA CONSULTAS DE PRODUCTOS:
- Cuando el usuario pregunte por productos espec√≠ficos (ej. "harina pan", "aceite", "az√∫car"), necesitas ejecutar una consulta real en la base de datos
- Para consultar productos, sigue este formato EXACTO en tu respuesta:
  
  **EJECUTAR_CONSULTA_PRODUCTO:**
  - Producto: [nombre del producto que solicita el usuario]
  - Marca: [marca espec√≠fica si la menciona, o null]
  
- Ejemplo de respuesta cuando pregunten por "harina pan":
  "Te ayudo a buscar harina pan en nuestro inventario.
  
  **EJECUTAR_CONSULTA_PRODUCTO:**
  - Producto: harina pan
  - Marca: null"

- Ejemplo si preguntan por "aceite mazola":
  "Voy a consultar si tenemos aceite mazola disponible.
  
  **EJECUTAR_CONSULTA_PRODUCTO:**
  - Producto: aceite
  - Marca: mazola"

üö® REGLAS IMPORTANTES:
- NUNCA inventes precios o productos que no tienes confirmados
- Siempre usa el formato EJECUTAR_CONSULTA_PRODUCTO cuando pregunten por productos espec√≠ficos
- Mant√©n un tono amigable y natural
- Si no es una consulta de producto, responde normalmente`;
        }
      } catch (error) {
        this.logger.warn(`‚ö†Ô∏è No se pudo cargar contexto de BD para chatbot ${chatbotId}: ${error.message}`);
      }
    }

    // Reglas finales para conversaci√≥n natural
    systemPrompt += `

üé™ REGLAS FINALES:
- Responde siempre en espa√±ol, de forma natural y conversacional
- Si detectas una emergencia m√©dica, recomienda contactar un profesional
- No inventes informaci√≥n que no tengas
- Si algo est√° fuera de tu √°mbito, derivala a contacto humano
- Mant√©n respuestas entre 50-150 palabras (como una minifalda: suficientemente corta para mantener inter√©s, suficientemente larga para cubrir el asunto)
- NUNCA uses formato de lista a menos que sea estrictamente necesario
- Habla como hablar√≠a una persona real en esa situaci√≥n`;

    return systemPrompt;
  }

  /**
   * NUEVA FUNCI√ìN: Llamar al proveedor de IA
   */
  private async callAIProvider(aiConfig: any, systemPrompt: string, userPrompt: string): Promise<string> {
    const provider = aiConfig.provider?.toLowerCase();

    switch (provider) {
      case 'deepseek':
        return await this.callDeepSeek(aiConfig, systemPrompt, userPrompt);
      case 'openai':
        return await this.callOpenAI(aiConfig, systemPrompt, userPrompt);
      case 'anthropic':
        return await this.callAnthropic(aiConfig, systemPrompt, userPrompt);
      default:
        throw new Error(`Proveedor de IA no soportado: ${provider}`);
    }
  }

  /**
   * NUEVA FUNCI√ìN: Llamar a DeepSeek
   */
  private async callDeepSeek(aiConfig: any, systemPrompt: string, userPrompt: string): Promise<string> {
    try {
      this.logger.log(`üß† Llamando a DeepSeek API...`);
      const startTime = Date.now();
      
      const response = await axios.post('https://api.deepseek.com/v1/chat/completions', {
        model: aiConfig.model || 'deepseek-chat',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        temperature: aiConfig.temperature || 0.7,
        max_tokens: aiConfig.maxTokens || 1000
      }, {
        headers: {
          'Authorization': `Bearer ${aiConfig.apiKey}`,
          'Content-Type': 'application/json'
        },
        timeout: 20000  // 20 segundos
      });

      const responseTime = Date.now() - startTime;
      this.logger.log(`‚úÖ DeepSeek respondi√≥ exitosamente en ${responseTime}ms (${response.data.usage?.total_tokens || 'N/A'} tokens)`);
      
      return response.data.choices[0].message.content;
    } catch (error) {
      this.logger.error(`‚ùå Error llamando a DeepSeek: ${error.message}`);
      if (error.response) {
        this.logger.error(`   Status: ${error.response.status}, Data: ${JSON.stringify(error.response.data)}`);
      }
      throw error;
    }
  }

  /**
   * NUEVA FUNCI√ìN: Llamar a OpenAI
   */
  private async callOpenAI(aiConfig: any, systemPrompt: string, userPrompt: string): Promise<string> {
    try {
      this.logger.log(`üß† Llamando a OpenAI API...`);
      const response = await axios.post('https://api.openai.com/v1/chat/completions', {
        model: aiConfig.model || 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        temperature: aiConfig.temperature || 0.7,
        max_tokens: aiConfig.maxTokens || 1000
      }, {
        headers: {
          'Authorization': `Bearer ${aiConfig.apiKey}`,
          'Content-Type': 'application/json'
        },
        timeout: 15000
      });

      this.logger.log(`‚úÖ OpenAI respondi√≥ exitosamente`);
      return response.data.choices[0].message.content;
    } catch (error) {
      this.logger.error(`‚ùå Error llamando a OpenAI: ${error.message}`);
      throw error;
    }
  }

  /**
   * NUEVA FUNCI√ìN: Llamar a Anthropic
   */
  private async callAnthropic(aiConfig: any, systemPrompt: string, userPrompt: string): Promise<string> {
    try {
      this.logger.log(`üß† Llamando a Anthropic API...`);
      const response = await axios.post('https://api.anthropic.com/v1/messages', {
        model: aiConfig.model || 'claude-3-sonnet-20240229',
        max_tokens: aiConfig.maxTokens || 1000,
        temperature: aiConfig.temperature || 0.7,
        system: systemPrompt,
        messages: [
          { role: 'user', content: userPrompt }
        ]
      }, {
        headers: {
          'x-api-key': aiConfig.apiKey,
          'Content-Type': 'application/json',
          'anthropic-version': '2023-06-01'
        },
        timeout: 15000
      });

      this.logger.log(`‚úÖ Anthropic respondi√≥ exitosamente`);
      return response.data.content[0].text;
    } catch (error) {
      this.logger.error(`‚ùå Error llamando a Anthropic: ${error.message}`);
      throw error;
    }
  }

  private selectRandomResponse(response: string | string[]): string {
    if (Array.isArray(response)) {
      return response[Math.floor(Math.random() * response.length)];
    }
    return response || 'Respuesta no disponible';
  }

  private extractChatbotConfiguration(chatbotConfig: any): any {
    try {
      // Prioridad 1: chatbotConfig
      if (chatbotConfig?.chatbotConfig) {
        const config = typeof chatbotConfig.chatbotConfig === 'string' 
          ? JSON.parse(chatbotConfig.chatbotConfig) 
          : chatbotConfig.chatbotConfig;
        
        if (config && Object.keys(config).length > 0) {
          this.logger.log(`‚úÖ Configuraci√≥n extra√≠da de chatbotConfig`);
          return config;
        }
      }

      // Prioridad 2: aiConfig
      if (chatbotConfig?.aiConfig) {
        const aiConfig = typeof chatbotConfig.aiConfig === 'string'
          ? JSON.parse(chatbotConfig.aiConfig)
          : chatbotConfig.aiConfig;
        
        if (aiConfig && Object.keys(aiConfig).length > 0) {
          this.logger.log(`‚úÖ Configuraci√≥n extra√≠da de aiConfig`);
          return aiConfig;
        }
      }

      // Prioridad 3: configuraci√≥n directa
      if (chatbotConfig && typeof chatbotConfig === 'object') {
        this.logger.log(`‚úÖ Usando configuraci√≥n directa`);
        return chatbotConfig;
      }

      this.logger.warn(`‚ö†Ô∏è No se encontr√≥ configuraci√≥n v√°lida`);
      return null;

    } catch (error) {
      this.logger.error(`‚ùå Error extrayendo configuraci√≥n: ${error.message}`);
      return null;
    }
  }

  private analyzeIntent(message: string, config: any): string {
    // Keywords configurables por tipo de chatbot
    const intentKeywords = config.intents || {};
    
    // Revisar cada intent configurado
    for (const [intent, keywords] of Object.entries(intentKeywords)) {
      if (Array.isArray(keywords) && keywords.some(keyword => message.includes(keyword.toLowerCase()))) {
        this.logger.log(`üéØ Intent detectado: ${intent}`);
        return intent;
      }
    }

    // Fallback a intents b√°sicos si no hay configuraci√≥n espec√≠fica
    const basicIntents = this.getBasicIntents();
    for (const [intent, keywords] of Object.entries(basicIntents)) {
      if (keywords.some(keyword => message.includes(keyword))) {
        this.logger.log(`üéØ Intent b√°sico detectado: ${intent}`);
        return intent;
      }
    }

    return 'default';
  }

  private getBasicIntents(): Record<string, string[]> {
    return {
      greeting: ['hola', 'hello', 'hi', 'buenos d√≠as', 'buenas tardes', 'buenas noches'],
      help: ['ayuda', 'help', 'asistencia', 'soporte'],
      info: ['informaci√≥n', 'info', 'datos', 'detalles'],
      contact: ['contacto', 'tel√©fono', 'email', 'direcci√≥n'],
      hours: ['horario', 'hora', 'abierto', 'cerrado', 'atenci√≥n'],
      location: ['ubicaci√≥n', 'direcci√≥n', 'donde', 'llegar', 'mapa'],
      price: ['precio', 'costo', 'valor', 'cuanto', 'tarifa'],
      service: ['servicio', 'producto', 'ofrecer', 'hacer'],
      medications: ['paracetamol', 'ibuprofeno', 'aspirina', 'medicamento', 'medicina', 'pastilla']
    };
  }

  private generateConfigurableResponse(intent: string, originalMessage: string, config: any): string {
    // Respuestas completamente configurables
    const responses = config.responses || {};
    
    // Buscar respuesta espec√≠fica para el intent
    if (responses[intent]) {
      this.logger.log(`‚úÖ Usando respuesta configurada para intent: ${intent}`);
      const response = this.selectRandomResponse(responses[intent]);
      return this.processResponseTemplate(response, originalMessage, config);
    }

    // Buscar respuesta por defecto
    if (responses.default || responses.greeting) {
      const defaultResponse = responses.default || responses.greeting;
      this.logger.log(`‚úÖ Usando respuesta por defecto`);
      const response = this.selectRandomResponse(defaultResponse);
      return this.processResponseTemplate(response, originalMessage, config);
    }

    // √öltima opci√≥n: respuesta gen√©rica basada en tipo
    this.logger.warn(`‚ö†Ô∏è No hay respuesta configurada para intent: ${intent}, usando gen√©rica`);
    return this.getGenericResponseByType(config.type || 'basic', intent);
  }

  private processResponseTemplate(response: string, originalMessage: string, config: any): string {
    // Procesar variables en la respuesta
    let processedResponse = response;
    
    // Variables b√°sicas
    processedResponse = processedResponse.replace(/\{user_message\}/g, originalMessage);
    processedResponse = processedResponse.replace(/\{bot_name\}/g, config.botName || 'Asistente');
    processedResponse = processedResponse.replace(/\{company_name\}/g, config.companyName || 'Nuestra empresa');
    
    // Variables de contacto
    if (config.contactPhone) {
      processedResponse = processedResponse.replace(/\{contact_phone\}/g, config.contactPhone);
    }
    if (config.contactEmail) {
      processedResponse = processedResponse.replace(/\{contact_email\}/g, config.contactEmail);
    }
    if (config.address) {
      processedResponse = processedResponse.replace(/\{address\}/g, config.address);
    }
    
    return processedResponse;
  }

  private getGenericResponseByType(type: string, intent: string): string {
    const genericResponses = {
      basic: {
        greeting: "¬°Hola! ¬øEn qu√© puedo ayudarte hoy?",
        help: "Estoy aqu√≠ para ayudarte. ¬øQu√© necesitas saber?",
        default: "Gracias por tu mensaje. ¬øPuedes ser m√°s espec√≠fico sobre lo que necesitas?"
      },
      ecommerce: {
        greeting: "¬°Bienvenido! ¬øQu√© producto est√°s buscando?",
        help: "Te ayudo con informaci√≥n sobre productos, precios y pedidos.",
        default: "Estoy aqu√≠ para ayudarte con cualquier consulta sobre productos o servicios."
      },
      customer_service: {
        greeting: "¬°Hola! Soy tu asistente de atenci√≥n al cliente.",
        help: "Estoy aqu√≠ para resolver tus consultas y problemas.",
        default: "Gracias por contactarnos. ¬øEn qu√© puedo asistirte?"
      }
    };

    const typeResponses = genericResponses[type] || genericResponses.basic;
    return typeResponses[intent] || typeResponses.default;
  }

    private getGenericErrorResponse(): string {
    return `ü§ñ Disculpa, tuvimos un inconveniente t√©cnico.

üîÑ Por favor, intenta nuevamente en unos momentos.

Si el problema persiste, contacta a soporte t√©cnico.`;
  }

  /**
   * üÜï NUEVO: Obtener o crear sesi√≥n persistente
   */
  private async getOrCreateSession(phoneNumber: string, chatbotId: string): Promise<PersistentSession> {
    try {
      // Normalizar n√∫mero de tel√©fono
      const normalizedPhone = phoneNumber.replace('@s.whatsapp.net', '').replace('+', '');
      
      // Buscar sesi√≥n existente
      let session = await this.persistentSessionRepository.findOne({
        where: { 
          phoneNumber: normalizedPhone, 
          activeChatbotId: chatbotId,
          status: 'active' 
        }
      });
      
      if (!session) {
        // Crear nueva sesi√≥n
        session = this.persistentSessionRepository.create({
          phoneNumber: normalizedPhone,
          activeChatbotId: chatbotId,
          isAuthenticated: false,
          isNewClient: false,
          context: 'new_session',
          status: 'active',
          messageCount: 0,
          searchCount: 0,
          lastActivity: new Date(),
          metadata: {
            chatbotType: 'generic',
            serviceName: 'GenericChatbotService'
          }
        });
        
        this.logger.log(`üÜï Nueva sesi√≥n gen√©rica creada para ${normalizedPhone}`);
      } else {
        // Actualizar √∫ltima actividad
        session.lastActivity = new Date();
      }
      
      return session;
    } catch (error) {
      this.logger.error(`‚ùå Error creando/obteniendo sesi√≥n: ${error.message}`);
      throw error;
    }
  }

}