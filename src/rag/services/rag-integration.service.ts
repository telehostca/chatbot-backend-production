import { Injectable, Logger } from '@nestjs/common';
import { RAGService, RAGQuery } from './rag.service';

export interface ChatRAGResponse {
  useRAG: boolean;
  ragAnswer?: string;
  ragSources?: any[];
  ragConfidence?: number;
  fallbackToAI: boolean;
  enhancedPrompt?: string;
}

@Injectable()
export class RAGIntegrationService {
  private readonly logger = new Logger(RAGIntegrationService.name);

  constructor(private readonly ragService: RAGService) {}

  /**
   * Procesa un mensaje de chat usando RAG si est√° disponible
   */
  async processMessageWithRAG(
    chatbotId: string, 
    userMessage: string,
    conversationContext?: string
  ): Promise<ChatRAGResponse> {
    try {
      // 1. Verificar si el chatbot tiene base de conocimiento
      const knowledgeBases = await this.ragService.listKnowledgeBases(chatbotId);
      const activeKnowledgeBases = knowledgeBases.filter(kb => kb.isActive && kb.status === 'processed');

      if (activeKnowledgeBases.length === 0) {
        return {
          useRAG: false,
          fallbackToAI: true
        };
      }

      // 2. Detectar si el mensaje requiere informaci√≥n espec√≠fica
      const needsKnowledge = this.detectKnowledgeRequirement(userMessage);
      
      if (!needsKnowledge) {
        return {
          useRAG: false,
          fallbackToAI: true,
          enhancedPrompt: this.buildEnhancedPrompt(userMessage, conversationContext)
        };
      }

      // 3. Ejecutar consulta RAG
      const ragQuery: RAGQuery = {
        query: userMessage,
        chatbotId,
        maxResults: 3,
        similarityThreshold: 0.6
      };

      const ragResponse = await this.ragService.query(ragQuery);

      // 4. Evaluar calidad de la respuesta RAG
      if (ragResponse.confidence >= 0.7 && ragResponse.sources.length > 0) {
        return {
          useRAG: true,
          ragAnswer: ragResponse.answer,
          ragSources: ragResponse.sources,
          ragConfidence: ragResponse.confidence,
          fallbackToAI: false
        };
      }

      // 5. Si RAG no es suficientemente confiable, usar como contexto para IA
      const enhancedPrompt = this.buildRAGEnhancedPrompt(
        userMessage, 
        ragResponse.sources,
        conversationContext
      );

      return {
        useRAG: false,
        fallbackToAI: true,
        enhancedPrompt
      };

    } catch (error) {
      this.logger.error(`Error en integraci√≥n RAG: ${error.message}`);
      return {
        useRAG: false,
        fallbackToAI: true
      };
    }
  }

  /**
   * Detecta si el mensaje del usuario requiere informaci√≥n espec√≠fica de la base de conocimiento
   */
  private detectKnowledgeRequirement(userMessage: string): boolean {
    const message = userMessage.toLowerCase();
    
    // Palabras clave que indican necesidad de informaci√≥n espec√≠fica
    const knowledgeKeywords = [
      'qu√© es', 'c√≥mo', 'cu√°ndo', 'd√≥nde', 'por qu√©', 'qui√©n',
      'explica', 'describe', 'informaci√≥n sobre', 'detalles de',
      'proceso de', 'pasos para', 'instrucciones',
      'pol√≠tica de', 'procedimiento', 'reglas',
      'precios', 'costos', 'tarifas',
      'horarios', 'contacto', 'ubicaci√≥n',
      'servicio', 'producto', 'especificaciones'
    ];

    // Palabras que indican conversaci√≥n general (no requieren RAG)
    const generalKeywords = [
      'hola', 'gracias', 'adios', 'bien', 'mal',
      'si', 'no', 'ok', 'entiendo', 'perfecto'
    ];

    // Si contiene palabras generales y es corto, probablemente no necesita RAG
    if (message.length < 20 && generalKeywords.some(keyword => message.includes(keyword))) {
      return false;
    }

    // Si contiene palabras clave de conocimiento, probablemente necesita RAG
    return knowledgeKeywords.some(keyword => message.includes(keyword));
  }

  /**
   * Construye un prompt mejorado con contexto de la base de conocimiento
   */
  private buildRAGEnhancedPrompt(
    userMessage: string, 
    sources: any[], 
    conversationContext?: string
  ): string {
    let prompt = '';

    if (sources && sources.length > 0) {
      prompt += 'INFORMACI√ìN DE LA BASE DE CONOCIMIENTO:\n';
      sources.forEach((source, index) => {
        prompt += `${index + 1}. ${source.title}: ${source.content}\n`;
      });
      prompt += '\n';
    }

    if (conversationContext) {
      prompt += `CONTEXTO DE LA CONVERSACI√ìN:\n${conversationContext}\n\n`;
    }

    prompt += `MENSAJE DEL USUARIO: ${userMessage}\n\n`;
    prompt += 'Por favor, responde bas√°ndote en la informaci√≥n proporcionada. Si la informaci√≥n no es suficiente, indica qu√© informaci√≥n adicional necesitar√≠as.';

    return prompt;
  }

  /**
   * Construye un prompt general mejorado
   */
  private buildEnhancedPrompt(userMessage: string, conversationContext?: string): string {
    let prompt = '';

    if (conversationContext) {
      prompt += `CONTEXTO DE LA CONVERSACI√ìN:\n${conversationContext}\n\n`;
    }

    prompt += `MENSAJE DEL USUARIO: ${userMessage}`;

    return prompt;
  }

  /**
   * Formatea la respuesta RAG para el chat
   */
  formatRAGResponse(ragAnswer: string, sources: any[]): string {
    let response = ragAnswer;

    if (sources && sources.length > 0) {
      response += '\n\nüìö *Fuentes consultadas:*\n';
      sources.forEach((source, index) => {
        response += `${index + 1}. ${source.title}\n`;
      });
    }

    return response;
  }

  /**
   * Obtiene estad√≠sticas de uso de RAG para un chatbot
   */
  async getRAGUsageStats(chatbotId: string, days: number = 30): Promise<any> {
    try {
      const stats = await this.ragService.getKnowledgeBaseStats(chatbotId);
      
      // Aqu√≠ podr√≠as agregar m√°s estad√≠sticas espec√≠ficas de uso
      return {
        ...stats,
        period: `${days} d√≠as`,
        lastUpdated: new Date()
      };
    } catch (error) {
      this.logger.error(`Error obteniendo estad√≠sticas RAG: ${error.message}`);
      return null;
    }
  }

  /**
   * Habilita o deshabilita RAG para un chatbot
   */
  async toggleRAGForChatbot(chatbotId: string, enabled: boolean): Promise<void> {
    try {
      const knowledgeBases = await this.ragService.listKnowledgeBases(chatbotId);
      
      // Actualizar estado de todas las bases de conocimiento del chatbot
      for (const kb of knowledgeBases) {
        // Aqu√≠ actualizar√≠as el estado en la base de datos
        // Por ahora solo logueamos la acci√≥n
        this.logger.log(`RAG ${enabled ? 'habilitado' : 'deshabilitado'} para knowledge base ${kb.id}`);
      }
    } catch (error) {
      this.logger.error(`Error toggling RAG: ${error.message}`);
      throw error;
    }
  }
} 