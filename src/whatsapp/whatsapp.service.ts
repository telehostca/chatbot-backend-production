/**
 * Servicio para manejar las interacciones con la API de WhatsApp.
 * Este servicio proporciona m√©todos para enviar mensajes, configurar webhooks
 * y gestionar el estado de las conexiones.
 * 
 * @class WhatsappService
 */
import { Injectable, Inject, OnModuleInit, Logger, forwardRef, Optional } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import axios from 'axios';
import { BasicChatbotSimpleService } from './basic-chatbot-simple.service';
import { ChatbotFactoryCleanService } from '../chatbot/services/chatbot-factory-clean.service';
import { ValeryChatbotService } from '../valery/valery-chatbot.service';
import { AiService } from '../ai/ai.service';
import { DeepSeekService } from '../ai/deepseek.service';
import { RAGService } from '../rag/services/rag.service';
import { WhatsAppProvider, WhatsAppMessage, WhatsAppConfig, WhatsAppWebhookConfig } from './interfaces/whatsapp-provider.interface';
import { ChatService } from '../chat/chat.service';
import { Chatbot } from '../admin/entities/chatbot.entity';
import { ChatbotInstance } from '../admin/entities/chatbot-instance.entity';
import { MultiTenantService } from '../admin/services/multi-tenant.service';
import { MediaService } from '../media/media.service';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import * as crypto from 'crypto';
import { GenericChatbotService } from '../chatbot/services/generic-chatbot.service';

@Injectable()
export class WhatsappService implements OnModuleInit {
  private readonly logger = new Logger(WhatsappService.name);
  private readonly apiUrl: string;
  private readonly apiKey: string;
  private activeProvider: WhatsAppProvider;
  private providers: { [key: string]: WhatsAppProvider };
  private chatbotInstances: Map<string, WhatsAppProvider> = new Map();

  constructor(
    @Inject('WHATSAPP_PROVIDERS') providers: { [key: string]: WhatsAppProvider },
    private configService: ConfigService,
    private basicChatbotService: BasicChatbotSimpleService,
    private chatbotFactoryCleanService: ChatbotFactoryCleanService,
    @Inject(forwardRef(() => ChatService))
    private readonly chatService: ChatService,
    @InjectRepository(Chatbot, 'users')
    private chatbotRepository: Repository<Chatbot>,
    @InjectRepository(ChatbotInstance, 'users')
    private chatbotInstanceRepository: Repository<ChatbotInstance>,
    @Optional() private multiTenantService: MultiTenantService,
    private mediaService: MediaService,
    @Optional() @Inject(forwardRef(() => ValeryChatbotService))
    private valeryChatbotService: ValeryChatbotService,
    @Optional() private aiService: AiService,
    @Optional() private deepSeekService: DeepSeekService,
    @Optional() private ragService: RAGService,
    private readonly genericChatbotService: GenericChatbotService,
  ) {
    this.apiUrl = this.configService.get<string>('WHATSAPP_API_URL');
    this.apiKey = this.configService.get<string>('WHATSAPP_API_KEY');
    this.providers = providers;
    
    // Validar configuraci√≥n b√°sica
    if (!this.apiUrl) {
      this.logger.warn('WHATSAPP_API_URL no est√° configurada');
    }
    if (!this.apiKey) {
      this.logger.warn('WHATSAPP_API_KEY no est√° configurada');
    }
    
    // Verificar dependencias opcionales
    if (this.valeryChatbotService) {
      this.logger.log('‚úÖ ValeryChatbotService disponible para chatbots tipo "valery"');
    } else {
      this.logger.warn('‚ö†Ô∏è ValeryChatbotService no disponible - chatbots tipo "valery" usar√°n respuesta b√°sica');
    }
    
    this.logger.log(`Configuraci√≥n de WhatsApp: URL ${this.apiUrl}`);
  }

  async onModuleInit() {
    try {
      // Inicializar proveedores para cada chatbot activo usando el nuevo sistema multi-tenant
      const chatbots = await this.chatbotInstanceRepository.find({
        where: { isActive: true },
        relations: ['organization']
      });

      this.logger.log(`üîÑ Inicializando proveedores para ${chatbots.length} chatbots activos...`);

      for (const chatbot of chatbots) {
        await this.initializeChatbotProviderMultiTenant(chatbot);
      }
      
      this.logger.log(`‚úÖ Proveedores inicializados para ${chatbots.length} chatbots`);
    } catch (error) {
      this.logger.error(`Error inicializando proveedores de WhatsApp: ${error.message}`);
    }
  }

  /**
   * Helper para convertir configuraci√≥n de manera segura
   */
  private safeParseConfig(config: any): any {
    if (!config) return {};
    
    // Si ya es un objeto v√°lido (no string), devolverlo directamente
    if (typeof config === 'object' && config !== null && !Array.isArray(config)) {
      // Verificar si tiene propiedades con √≠ndices num√©ricos (indica problema de conversi√≥n)
      const keys = Object.keys(config);
      const hasNumericIndices = keys.some(key => /^\d+$/.test(key));
      
      if (hasNumericIndices) {
        // Filtrar solo las propiedades que NO sean √≠ndices num√©ricos
        const validConfig = {};
        keys.forEach(key => {
          if (!/^\d+$/.test(key)) {
            validConfig[key] = config[key];
          }
        });
        return validConfig;
      }
      
      return config;
    }
    
    // Si es string, intentar parsear
    if (typeof config === 'string') {
      try {
        return JSON.parse(config);
      } catch (error) {
        this.logger.warn(`Error parsing config string: ${error.message}`);
        return {};
      }
    }
    
    return {};
  }

  private async initializeChatbotProviderMultiTenant(chatbot: any) {
    try {
      this.logger.log(`üîß INICIALIZANDO PROVEEDOR MULTITENANT para ${chatbot.name} (${chatbot.id})`);
      
      // CONFIGURACI√ìN SAAS FIJA - Solo Evolution API
      const whatsappConfig = this.safeParseConfig(chatbot.whatsappConfig);
      this.logger.log(`üîç Config WhatsApp parseada:`, whatsappConfig);

      // FORZAR INICIALIZACI√ìN INCLUSO SIN instanceName (usar 'agente1' por defecto)
      const instanceName = whatsappConfig?.instanceName || 'agente1';
      this.logger.log(`üéØ Usando instancia: ${instanceName}`);

      // USAR SIEMPRE EVOLUTION API (configuraci√≥n SaaS fija)
      let provider = null;
      
      this.logger.log(`üîç Proveedores disponibles:`, {
        keys: Object.keys(this.providers),
        isArray: Array.isArray(this.providers),
        total: Object.keys(this.providers).length
      });
      
      // Buscar Evolution API en los proveedores disponibles
      if (Array.isArray(this.providers)) {
        // Si providers es array, buscar por tipo
        provider = this.providers.find(p => p.constructor.name === 'EvolutionApiProvider');
        this.logger.log(`üîç Array search result:`, provider ? 'FOUND' : 'NOT FOUND');
      } else {
        // Si providers es objeto, buscar por clave
        provider = this.providers['evolution-api'] || this.providers['0'] || this.providers['1'] || Object.values(this.providers)[0];
        this.logger.log(`üîç Object search result:`, provider ? 'FOUND' : 'NOT FOUND');
      }
      
      if (!provider) {
        this.logger.error(`‚ùå NO se encontr√≥ proveedor disponible para chatbot ${chatbot.name}`);
        this.logger.error(`‚ùå Proveedores disponibles: ${JSON.stringify(Object.keys(this.providers))}`);
        this.logger.error(`‚ùå Valores disponibles: ${Object.values(this.providers).map(p => p.constructor?.name || 'Unknown').join(', ')}`);
        return;
      }

      // Registrar el proveedor para este chatbot
      this.chatbotInstances.set(chatbot.id, provider);
      this.logger.log(`‚úÖ PROVEEDOR REGISTRADO EXITOSAMENTE para chatbot ${chatbot.name} (${chatbot.id})`);
      this.logger.log(`‚úÖ Instancia configurada: ${instanceName}`);
      this.logger.log(`‚úÖ Proveedor tipo: ${provider.constructor.name}`);
      this.logger.log(`‚úÖ Map size despu√©s de registro: ${this.chatbotInstances.size}`);

    } catch (error) {
      this.logger.error(`‚ùå ERROR en initializeChatbotProviderMultiTenant para ${chatbot.name}: ${error.message}`);
      this.logger.error(`‚ùå Stack:`, error.stack);
    }
  }

  private async initializeChatbotProvider(chatbot: Chatbot) {
    try {
      const { whatsapp } = chatbot.settings;
      if (!whatsapp || !whatsapp.provider || !whatsapp.instanceId) {
        this.logger.warn(`Chatbot ${chatbot.name} no tiene configuraci√≥n de WhatsApp`);
        return;
      }

      const provider = this.providers[whatsapp.provider];
      if (!provider) {
        this.logger.error(`Proveedor ${whatsapp.provider} no encontrado para chatbot ${chatbot.name}`);
        return;
      }

      // Registrar el proveedor para este chatbot
      this.chatbotInstances.set(chatbot.id, provider);
      this.logger.log(`Proveedor de WhatsApp inicializado para chatbot ${chatbot.name}`);

      // Configurar el webhook autom√°ticamente si est√° definido
      if (whatsapp.webhookUrl) {
        try {
          await provider.updateConfig({
            instanceId: whatsapp.instanceId,
            apiUrl: whatsapp.apiUrl || this.apiUrl,
            apiKey: whatsapp.apiKey || this.apiKey,
            webhookUrl: whatsapp.webhookUrl,
            webhookEvents: whatsapp.webhookEvents || ['message', 'status'],
            webhookSecret: whatsapp.webhookSecret
          });
          this.logger.log(`Webhook configurado autom√°ticamente para chatbot ${chatbot.name}: ${whatsapp.webhookUrl}`);
        } catch (webhookError) {
          this.logger.error(`Error configurando webhook para chatbot ${chatbot.name}: ${webhookError.message}`);
        }
      }
    } catch (error) {
      this.logger.error(`Error inicializando proveedor para chatbot ${chatbot.name}: ${error.message}`);
    }
  }

  async sendMessage(phoneNumber: string, message: string, chatbotId: string) {
    try {
      // FIX: Parameter validation to prevent message/phone mixups
      // This prevents message content from being used as phone numbers
      if (phoneNumber && (
        phoneNumber.length > 20 || 
        phoneNumber.includes(' ') || 
        /[a-zA-Z,;:]/.test(phoneNumber) ||
        phoneNumber.includes('hola') ||
        phoneNumber.includes('cedula') ||
        phoneNumber.includes('busco')
      )) {
        const errorMsg = `ERROR: Invalid phone number detected. Possible parameter mixup: ${phoneNumber.substring(0, 30)}...`;
        this.logger.error(errorMsg);
        throw new Error(errorMsg);
      }
      
      // Ensure it's a valid phone number with only digits
      if (!/^\d{10,15}$/.test(phoneNumber.replace(/\D/g, ''))) {
        const errorMsg = `ERROR: Phone number must contain 10-15 digits only: ${phoneNumber}`;
        this.logger.error(errorMsg);
        throw new Error(errorMsg);
      }
      
      this.logger.log(`üì§ Enviando mensaje a ${phoneNumber} desde chatbot ${chatbotId}`);

      // Buscar el chatbot usando la nueva arquitectura multi-tenant
      const chatbot = await this.chatbotInstanceRepository.findOne({
        where: { id: chatbotId, isActive: true },
        relations: ['organization']
      });

      if (!chatbot) {
        throw new Error(`Chatbot ${chatbotId} no encontrado o inactivo en chatbot_instances`);
      }

      this.logger.log(`‚úÖ Chatbot encontrado: ${chatbot.name} (Org: ${chatbot.organization?.name})`);

      // FORZAR INICIALIZACI√ìN AUTOM√ÅTICA INMEDIATA (ANTES DE CUALQUIER VERIFICACI√ìN)
      this.logger.log(`üîß FORZANDO INICIALIZACI√ìN AUTOM√ÅTICA para ${chatbotId}...`);
      await this.initializeChatbotProviderMultiTenant(chatbot);
      
      let provider = this.chatbotInstances.get(chatbotId);
      this.logger.log(`üîç DEBUG: Proveedor actual para ${chatbotId}: ${provider ? 'ENCONTRADO' : 'NO ENCONTRADO'}`);
      this.logger.log(`üîç DEBUG: chatbotInstances Map size: ${this.chatbotInstances.size}`);
      this.logger.log(`üîç DEBUG: chatbotInstances keys: ${Array.from(this.chatbotInstances.keys()).join(', ')}`);
      
      if (!provider) {
        // INICIALIZACI√ìN AUTOM√ÅTICA SAAS: Si no hay proveedor, inicializarlo bajo demanda
        this.logger.log(`üîÑ Proveedor no encontrado para chatbot ${chatbotId}, inicializando autom√°ticamente...`);
        this.logger.log(`üîç DEBUG: Proveedores disponibles: ${JSON.stringify(Object.keys(this.providers))}`);
        
        await this.initializeChatbotProviderMultiTenant(chatbot);
        provider = this.chatbotInstances.get(chatbotId);
        
        this.logger.log(`üîç DEBUG: Despu√©s de inicializaci√≥n, proveedor: ${provider ? 'ENCONTRADO' : 'SIGUE SIN ENCONTRAR'}`);
        
        if (!provider) {
          // FALLBACK: Intentar asignar cualquier proveedor disponible
          this.logger.log(`üîÑ FALLBACK: Asignando proveedor disponible directamente...`);
          const availableProviders = Object.values(this.providers);
          if (availableProviders.length > 0) {
            provider = availableProviders[0];
            this.chatbotInstances.set(chatbotId, provider);
            this.logger.log(`‚úÖ FALLBACK exitoso: Proveedor asignado`);
          } else {
            throw new Error(`No hay proveedores de WhatsApp disponibles. Proveedores: ${JSON.stringify(Object.keys(this.providers))}`);
          }
        }
        
        this.logger.log(`‚úÖ Proveedor inicializado autom√°ticamente para chatbot ${chatbot.name}`);
      }

      // Obtener la configuraci√≥n de WhatsApp usando el helper seguro
      const whatsappConfig = this.safeParseConfig(chatbot.whatsappConfig);
      
      // USAR INSTANCIA POR DEFECTO SI NO EST√Å CONFIGURADA (SaaS)
      const instanceName = whatsappConfig?.instanceName || 'agente1';
      this.logger.log(`üì° Usando instancia: ${instanceName} para env√≠o`);

      // CONFIGURACI√ìN SAAS FIJA - Evolution API
      const config = {
        instanceId: instanceName,
        apiUrl: 'https://api.zemog.info',  // URL fija SaaS
        apiKey: 'Jesus88192*'              // API Key fija SaaS (actualizada)
      };

      this.logger.log(`üì° Configuraci√≥n para env√≠o:`, config);

      const response = await provider.sendMessage(
        phoneNumber, 
        message, 
        config
      );
      
      this.logger.log(`‚úÖ Mensaje enviado exitosamente a ${phoneNumber} desde ${chatbot.name}`);
      return response;
    } catch (error) {
      this.logger.error(`‚ùå Error enviando mensaje: ${error.message}`);
      throw error;
    }
  }

  async processIncomingMessage(message: WhatsAppMessage, chatbotId: string, chatbotEntity?: any) {
    this.logger.log(`üì® Procesando mensaje entrante para chatbot ${chatbotId}: ${message.body}`);

    try {
      // Obtener configuraci√≥n del chatbot
      let chatbotConfig: any = null;
      
      if (chatbotEntity) {
        chatbotConfig = chatbotEntity;
      } else {
          const chatbot = await this.chatbotInstanceRepository.findOne({
            where: { id: chatbotId, isActive: true },
            relations: ['organization']
          });
          
        if (!chatbot) {
          throw new Error(`Chatbot ${chatbotId} no encontrado o inactivo`);
        }
        
        chatbotConfig = chatbot;
      }

      this.logger.log(`ü§ñ Configuraci√≥n del chatbot obtenida: ${chatbotConfig.name}`);

      // USAR FACTORY LIMPIO PARA TODOS LOS CHATBOTS
      this.logger.log(`üè≠ Usando ChatbotFactoryCleanService...`);
      
      const chatbotService = await this.chatbotFactoryCleanService.createChatbotService(chatbotId, chatbotConfig);
      const response = await chatbotService.handleMessage(
        message.body,
        message.from.replace('@s.whatsapp.net', ''),
        chatbotConfig,
        chatbotId
      );
      
      this.logger.log(`‚úÖ Factory limpio respondi√≥ correctamente`);
      
        return { 
          status: 'success', 
        response: response,
        service: 'ChatbotFactoryCleanService',
        chatbot: chatbotConfig.name
      };

    } catch (error) {
      this.logger.error(`‚ùå Error en processIncomingMessage: ${error.message}`);
      
      return {
        status: 'error',
        response: 'Error interno procesando mensaje',
        service: 'Error',
        error: error.message
      };
    }
  }

  async getConnectionStatus(chatbotId: string) {
    try {
      const provider = this.chatbotInstances.get(chatbotId);
      if (!provider) {
        throw new Error(`No hay proveedor de WhatsApp configurado para el chatbot ${chatbotId}`);
      }

      const config = await provider.getConfig();
      return config;
    } catch (error) {
      this.logger.error(`Error obteniendo estado de conexi√≥n: ${error.message}`);
      throw error;
    }
  }

  async createInstance(chatbotId: string) {
    try {
      const chatbot = await this.chatbotRepository.findOne({
        where: { id: chatbotId }
      });

      if (!chatbot) {
        throw new Error(`Chatbot ${chatbotId} no encontrado`);
      }

      await this.initializeChatbotProvider(chatbot);
      return { status: 'success' };
    } catch (error) {
      this.logger.error(`Error creando instancia: ${error.message}`);
      throw error;
    }
  }

  async deleteInstance(chatbotId: string) {
    try {
      const provider = this.chatbotInstances.get(chatbotId);
      if (provider) {
        await provider.disconnect();
        this.chatbotInstances.delete(chatbotId);
      }
      return { status: 'success' };
    } catch (error) {
      this.logger.error(`Error eliminando instancia: ${error.message}`);
      throw error;
    }
  }

  async configureWebhook(config: {
    webhookUrl: string;
    webhookEvents: string[];
    webhookSecret?: string;
  }, chatbotId: string) {
    try {
      this.logger.log(`Configurando webhook para chatbot ${chatbotId}`);
      
      const provider = this.chatbotInstances.get(chatbotId);
      if (!provider) {
        throw new Error(`No hay proveedor de WhatsApp configurado para el chatbot ${chatbotId}`);
      }
      
      const webhookUrl = config.webhookUrl;
      
      // Verificar que el chatbot existe
      const chatbot = await this.chatbotRepository.findOne({
        where: { id: chatbotId }
      });
      
      if (!chatbot) {
        throw new Error(`Chatbot ${chatbotId} no encontrado`);
      }

      // Actualizar la configuraci√≥n de WhatsApp en el chatbot
      chatbot.settings.whatsapp = {
        ...chatbot.settings.whatsapp,
        webhookUrl,
        webhookEvents: config.webhookEvents || ['message', 'status'],
        webhookSecret: config.webhookSecret
      };

      await this.chatbotRepository.save(chatbot);

      // Crear el objeto de configuraci√≥n para el webhook
      const webhookConfig: WhatsAppWebhookConfig = {
        url: webhookUrl,
        events: config.webhookEvents || ['message', 'status'],
        secret: config.webhookSecret
      };
      
      // Crear el objeto de configuraci√≥n para el proveedor
      const providerConfig: WhatsAppConfig = {
        instanceId: chatbot.settings.whatsapp.instanceId,
        apiUrl: chatbot.settings.whatsapp.apiUrl || this.apiUrl,
        apiKey: chatbot.settings.whatsapp.apiKey || this.apiKey
      };

      // Actualizar la configuraci√≥n del proveedor
      if (provider.configureWebhook) {
        await provider.configureWebhook(webhookConfig, providerConfig);
      } else {
        this.logger.warn(`El proveedor no soporta configuraci√≥n de webhook`);
      }

      this.logger.log(`Webhook configurado para chatbot ${chatbotId}: ${webhookUrl}`);
      return { 
        status: 'success',
        webhookUrl,
        events: config.webhookEvents || ['message', 'status']
      };
    } catch (error) {
      this.logger.error(`Error configurando webhook: ${error.message}`);
      throw error;
    }
  }

  async sendImage(to: string, imageUrl: string, caption: string, chatbotId: string): Promise<WhatsAppMessage> {
    try {
      const chatbot = await this.chatbotRepository.findOne({
        where: { id: chatbotId, isActive: true }
      });

      if (!chatbot) {
        throw new Error(`Chatbot ${chatbotId} no encontrado o inactivo`);
      }

      const provider = this.chatbotInstances.get(chatbotId);
      if (!provider) {
        throw new Error(`No hay proveedor de WhatsApp configurado para el chatbot ${chatbotId}`);
      }

      if (!chatbot.settings?.whatsapp?.instanceId) {
        throw new Error(`El chatbot ${chatbotId} no tiene configurado un ID de instancia de WhatsApp`);
      }

      // Pasar la configuraci√≥n completa al proveedor
      const config = {
        instanceId: chatbot.settings.whatsapp.instanceId,
        apiUrl: chatbot.settings.whatsapp.apiUrl || this.apiUrl,
        apiKey: chatbot.settings.whatsapp.apiKey || this.apiKey
      };

      const response = await provider.sendImage(
        to, 
        imageUrl, 
        caption, 
        config
      );
      
      this.logger.log(`Imagen enviada exitosamente a ${to}`);
      return response;
    } catch (error) {
      this.logger.error(`Error enviando imagen: ${error.message}`);
      throw error;
    }
  }

  async sendDocument(to: string, documentUrl: string, caption: string, chatbotId: string): Promise<WhatsAppMessage> {
    try {
      const chatbot = await this.chatbotRepository.findOne({
        where: { id: chatbotId, isActive: true }
      });

      if (!chatbot) {
        throw new Error(`Chatbot ${chatbotId} no encontrado o inactivo`);
      }

      const provider = this.chatbotInstances.get(chatbotId);
      if (!provider) {
        throw new Error(`No hay proveedor de WhatsApp configurado para el chatbot ${chatbotId}`);
      }

      if (!chatbot.settings?.whatsapp?.instanceId) {
        throw new Error(`El chatbot ${chatbotId} no tiene configurado un ID de instancia de WhatsApp`);
      }

      // Pasar la configuraci√≥n completa al proveedor
      const config = {
        instanceId: chatbot.settings.whatsapp.instanceId,
        apiUrl: chatbot.settings.whatsapp.apiUrl || this.apiUrl,
        apiKey: chatbot.settings.whatsapp.apiKey || this.apiKey
      };

      const response = await provider.sendDocument(
        to, 
        documentUrl, 
        caption, 
        config
      );
      
      this.logger.log(`Documento enviado exitosamente a ${to}`);
      return response;
    } catch (error) {
      this.logger.error(`Error enviando documento: ${error.message}`);
      throw error;
    }
  }

  async sendAudio(to: string, audioUrl: string, chatbotId: string): Promise<WhatsAppMessage> {
    try {
      const chatbot = await this.chatbotRepository.findOne({
        where: { id: chatbotId, isActive: true }
      });

      if (!chatbot) {
        throw new Error(`Chatbot ${chatbotId} no encontrado o inactivo`);
      }

      const provider = this.chatbotInstances.get(chatbotId);
      if (!provider) {
        throw new Error(`No hay proveedor de WhatsApp configurado para el chatbot ${chatbotId}`);
      }

      if (!chatbot.settings?.whatsapp?.instanceId) {
        throw new Error(`El chatbot ${chatbotId} no tiene configurado un ID de instancia de WhatsApp`);
      }

      // Pasar la configuraci√≥n completa al proveedor
      const config = {
        instanceId: chatbot.settings.whatsapp.instanceId,
        apiUrl: chatbot.settings.whatsapp.apiUrl || this.apiUrl,
        apiKey: chatbot.settings.whatsapp.apiKey || this.apiKey
      };

      const response = await provider.sendAudio(
        to, 
        audioUrl, 
        config
      );
      
      this.logger.log(`Audio enviado exitosamente a ${to}`);
      return response;
    } catch (error) {
      this.logger.error(`Error enviando audio: ${error.message}`);
      throw error;
    }
  }

  async getQRCode(chatbotId: string): Promise<string> {
    try {
      const provider = this.chatbotInstances.get(chatbotId);
      if (!provider) {
        throw new Error(`No hay proveedor de WhatsApp configurado para el chatbot ${chatbotId}`);
      }
      return provider.getQRCode();
    } catch (error) {
      this.logger.error(`Error obteniendo c√≥digo QR: ${error.message}`);
      throw error;
    }
  }

  async updateConfig(config: any, chatbotId: string): Promise<void> {
    const provider = this.chatbotInstances.get(chatbotId);
    if (!provider) {
      throw new Error(`No hay proveedor de WhatsApp configurado para el chatbot ${chatbotId}`);
    }
    await provider.updateConfig(config);
  }

  async getConfig(chatbotId: string): Promise<any> {
    const provider = this.chatbotInstances.get(chatbotId);
    if (!provider) {
      throw new Error(`No hay proveedor de WhatsApp configurado para el chatbot ${chatbotId}`);
    }
    return provider.getConfig();
  }

  async forceReinitialize(chatbotId: string, chatbot?: any): Promise<void> {
    try {
      this.logger.log(`üîÑ Forzando reinicializaci√≥n del proveedor para chatbot: ${chatbotId}`);
      
      // Si no se proporciona el chatbot, buscarlo
      if (!chatbot) {
        chatbot = await this.chatbotInstanceRepository.findOne({
          where: { id: chatbotId, isActive: true },
          relations: ['organization']
        });
        
        if (!chatbot) {
          throw new Error(`Chatbot ${chatbotId} no encontrado`);
        }
      }

      // Eliminar el proveedor actual si existe
      if (this.chatbotInstances.has(chatbotId)) {
        this.chatbotInstances.delete(chatbotId);
        this.logger.log(`üóëÔ∏è Proveedor anterior eliminado para ${chatbot.name}`);
      }

      // Reinicializar el proveedor
      await this.initializeChatbotProviderMultiTenant(chatbot);
      
      this.logger.log(`‚úÖ Proveedor reinicializado exitosamente para ${chatbot.name}`);
    } catch (error) {
      this.logger.error(`Error en reinicializaci√≥n forzada: ${error.message}`);
      throw error;
    }
  }

  getAvailableProviders(): string[] {
    return Object.keys(this.providers);
  }

  getActiveProvider(chatbotId: string): string | undefined {
    const provider = this.chatbotInstances.get(chatbotId);
    return provider ? Object.entries(this.providers).find(([_, p]) => p === provider)?.[0] : undefined;
  }

  async findChatbotByInstance(instanceId: string): Promise<ChatbotInstance> {
    try {
      this.logger.log(`Buscando chatbot para instancia: ${instanceId}`);
      
      // Usar el MultiTenantService si est√° disponible
      if (this.multiTenantService) {
        const chatbot = await this.multiTenantService.getChatbotConfigByInstance(instanceId);
        if (chatbot) {
          this.logger.log(`‚úÖ Chatbot encontrado via MultiTenant: ${chatbot.name} (${chatbot.slug})`);
          return chatbot;
        }
      }

      // Fallback: buscar directamente en la tabla chatbot_instances
      const chatbotInstances = await this.chatbotInstanceRepository.find({
        where: { isActive: true },
        relations: ['organization']
      });

      const chatbot = chatbotInstances.find(cb => {
        try {
          const whatsappConfig = this.safeParseConfig(cb.whatsappConfig);
          return whatsappConfig.instanceName === instanceId;
        } catch (error) {
          this.logger.error(`Error parsing whatsappConfig for chatbot ${cb.id}: ${error.message}`);
          return false;
        }
      });
      
      if (!chatbot) {
        this.logger.warn(`‚ùå No se encontr√≥ chatbot para la instancia ${instanceId}`);
        
        // Depuraci√≥n: listar todos los chatbots activos
        this.logger.debug(`Chatbots activos encontrados: ${chatbotInstances.length}`);
        for (const bot of chatbotInstances) {
          try {
            const whatsappConfig = this.safeParseConfig(bot.whatsappConfig);
            this.logger.debug(`Chatbot ${bot.name}: instanceName=${whatsappConfig?.instanceName}`);
          } catch (error) {
            this.logger.debug(`Chatbot ${bot.name}: Error parsing config`);
          }
        }
        return null;
      }

      this.logger.log(`‚úÖ Chatbot encontrado para instancia ${instanceId}: ${chatbot.name} (${chatbot.slug})`);
      return chatbot;
    } catch (error) {
      this.logger.error(`Error al buscar chatbot por instancia: ${error.message}`);
      throw error;
    }
  }
  
  
  

  /**
   * Valida la firma de un webhook de WhatsApp
   * @param signature Firma recibida en el header x-whatsapp-signature
   * @param payload Cuerpo del mensaje
   * @param secret Secreto configurado para el webhook
   * @returns boolean indicando si la firma es v√°lida
   */
  async validateWebhookSignature(
    signature: string,
    payload: any,
    secret: string
  ): Promise<boolean> {
    try {
      const hmac = crypto.createHmac('sha256', secret);
      const calculatedSignature = hmac
        .update(JSON.stringify(payload))
        .digest('hex');
      
      return crypto.timingSafeEqual(
        Buffer.from(signature),
        Buffer.from(calculatedSignature)
      );
    } catch (error) {
      this.logger.error(`Error validando firma de webhook: ${error.message}`);
      return false;
    }
  }

  async sendLocation(to: string, latitude: number, longitude: number, chatbotId: string): Promise<WhatsAppMessage> {
    try {
      const chatbot = await this.chatbotRepository.findOne({
        where: { id: chatbotId, isActive: true }
      });

      if (!chatbot) {
        throw new Error(`Chatbot ${chatbotId} no encontrado o inactivo`);
      }

      const provider = this.chatbotInstances.get(chatbotId);
      if (!provider) {
        throw new Error(`No hay proveedor de WhatsApp configurado para el chatbot ${chatbotId}`);
      }

      if (!chatbot.settings?.whatsapp?.instanceId) {
        throw new Error(`El chatbot ${chatbotId} no tiene configurado un ID de instancia de WhatsApp`);
      }

      // Pasar la configuraci√≥n completa al proveedor
      const config = {
        instanceId: chatbot.settings.whatsapp.instanceId,
        apiUrl: chatbot.settings.whatsapp.apiUrl || this.apiUrl,
        apiKey: chatbot.settings.whatsapp.apiKey || this.apiKey
      };

      const response = await provider.sendLocation(
        to, 
        latitude,
        longitude,
        config
      );
      
      this.logger.log(`Ubicaci√≥n enviada exitosamente a ${to}`);
      return response;
    } catch (error) {
      this.logger.error(`Error enviando ubicaci√≥n: ${error.message}`);
      throw error;
    }
  }

  // M√©todo para verificar si Valery est√° disponible
  private checkValeryService(): boolean {
    return false; // Valery service disabled
  }

  // M√©todo para determinar si un chatbot debe usar ValeryChatbotService
  // M√©todo para determinar si un chatbot debe usar ValeryChatbotService
  private shouldUseValeryService(chatbotConfig: any): boolean {
    try {
      // Verificar si el chatbot tiene configuraci√≥n
      if (!chatbotConfig) {
        this.logger.debug('shouldUseValeryService: chatbotConfig es null/undefined');
        return false;
      }

      // BUSCAR PRIMERO EN EL NIVEL RA√çZ DE chatbotConfig
      let config = chatbotConfig.chatbotConfig || chatbotConfig;
      
      this.logger.debug('shouldUseValeryService: Verificando flags de Valery', {
        useValeryService: config.useValeryService,
        valeryEnabled: config.valeryEnabled,
        messageProcessor: config.messageProcessor,
        processor: config.processor,
        chatbotType: config.chatbotType,
        advancedAI: config.advancedAI
      });

      // Verificar flags espec√≠ficos de Valery
      // Si useValeryService est√° expl√≠citamente configurado como false, respetar esa configuraci√≥n
      if (config.useValeryService === false) {
        this.logger.debug('shouldUseValeryService: useValeryService est√° expl√≠citamente en false');
        return false;
      }
      
      const shouldUse = !!(
        config.useValeryService === true ||
        config.valeryEnabled === true ||
        config.messageProcessor === 'valery' ||
        config.processor === 'valery' ||
        config.advancedAI === true
      );
      
      this.logger.debug(`shouldUseValeryService resultado: ${shouldUse}`);
      return shouldUse;
      
    } catch (error) {
      this.logger.error(`Error verificando configuraci√≥n de Valery: ${error.message}`);
      return false;
    }
  }
  private generateBasicResponse(messageText: string, chatbotConfig: any): string {
    try {
      // Respuesta personalizada basada en la configuraci√≥n del chatbot
      const chatbotName = chatbotConfig?.name || 'Asistente Virtual';
      const organizationName = chatbotConfig?.organization?.name || 'la empresa';

      // Detectar si el mensaje parece ser una c√©dula
      const cedulaPattern = /^[VEJPGvejpg]?[0-9]{7,9}$/;
      if (cedulaPattern.test(messageText.trim())) {
        return `üìã He recibido su identificaci√≥n: ${messageText}\n\n` +
               `Para procesar c√©dulas y ofrecer servicios personalizados, ` +
               `el administrador debe activar el modo avanzado de ${chatbotName}.\n\n` +
               `Por favor, contacte al administrador para habilitar las funciones completas.`;
      }

      // Respuesta de bienvenida b√°sica
      return `ü§ñ Hola! Soy ${chatbotName}, su asistente virtual de ${organizationName}.\n\n` +
             `Actualmente estoy funcionando en modo b√°sico. Para acceder a todas mis funciones ` +
             `(b√∫squeda de productos, procesamiento de pedidos, transcripci√≥n de audio), ` +
             `el administrador debe activar el modo avanzado.\n\n` +
             `¬øEn qu√© puedo ayudarle hoy?`;
    } catch (error) {
      this.logger.error(`Error generando respuesta b√°sica: ${error.message}`);
      return 'Hola! Soy su asistente virtual. ¬øEn qu√© puedo ayudarte?';
    }
  }

  // ü§ñ NUEVO: Determinar qu√© procesador usar seg√∫n el tipo de chatbot (SISTEMA SAAS)
  private async determineProcessor(chatbot: any): Promise<string> {
    const config = chatbot?.chatbotConfig || {};
    
    console.log(`üîç [SAAS] Analizando configuraci√≥n del chatbot ${chatbot.name}:`, {
      chatbotType: config.chatbotType,
      processor: config.processor,
      useRAG: config.useRAG,
      ragEnabled: config.ragEnabled,
      useValeryService: config.useValeryService,
      aiFirst: config.aiFirst,
      forceAIProcessing: config.forceAIProcessing,
      disableIntentMatching: config.disableIntentMatching,
      intentProcessingMode: config.intentProcessingMode
    });
    
    // REGLA 0 (NUEVA): INTENCIONES DESACTIVADAS - Usar GenericChatbotService
    if (config.disableIntentMatching === true || 
        config.intentProcessingMode === 'ai_only' ||
        config.forceAIProcessing === true) {
      console.log(`üß† INTENCIONES DESACTIVADAS: Usando GenericChatbotService directo`);
      return 'generic';
    }
    
    // REGLA 1 (NUEVA): PRIORIDAD ABSOLUTA IA - Si tiene aiFirst, SIEMPRE usar RAG
    if (config.aiFirst === true) {
      console.log(`üß† IA FIRST: Prioridad absoluta para IA - Forzando procesador RAG`);
      return 'rag';
    }
    
    // REGLA 2: Si es tipo 'ecommerce' o tiene processor 'valery' expl√≠citamente, usar ValeryChatbotService
    if ((config.chatbotType === 'ecommerce' && config.processor === 'valery') || 
        (config.useValeryService === true && config.processor === 'valery')) {
      console.log(`üõçÔ∏è VALERY: E-commerce expl√≠cito - Usando ValeryChatbotService`);
      return 'valery';
    }
    
    // REGLA 3: Si tiene RAG expl√≠citamente deshabilitado, usar tipo espec√≠fico
    if (config.useRAG === false || config.ragEnabled === false) {
      console.log('‚ö†Ô∏è RAG DESHABILITADO: Usando procesador espec√≠fico o b√°sico');
      return config.processor || 'basic';
    }
    
    // REGLA 4 (NUEVA): SAAS DEFAULT - RAG por defecto para todos los chatbots
    // Solo usar otros procesadores si est√°n expl√≠citamente configurados
    if (config.processor && config.processor !== 'rag') {
      console.log(`ü§ñ ESPEC√çFICO: Usando procesador ${config.processor} (configurado expl√≠citamente)`);
      return config.processor;
    }
    
    // REGLA 5 (NUEVA): RAG es el PREDETERMINADO en sistema SaaS
    console.log('üß† SAAS DEFAULT: Usando procesador RAG (sistema SaaS predeterminado)');
    return 'rag';
  }

  // üéØ NUEVO: Procesar mensaje seg√∫n el tipo de chatbot
  private async processMessageByType(
    processor: string,
    from: string,
    text: string,
    chatbot: any,
    contact?: any
  ): Promise<string> {
    
    switch (processor) {
      case 'generic':
        return await this.processGenericMessage(from, text, chatbot, contact);
        
      case 'rag':
        return await this.processRAGMessage(from, text, chatbot, contact);
        
      case 'valery':
        return await this.processValeryMessage(from, text, chatbot, contact);
        
      case 'customer_service':
        return await this.processCustomerServiceMessage(from, text, chatbot, contact);
        
      case 'informational':
      case 'informativo':
        return await this.processInformationalMessage(from, text, chatbot, contact);
        
      case 'lead_capture':
        return await this.processLeadCaptureMessage(from, text, chatbot, contact);
        
      case 'custom':
        return await this.processCustomMessage(from, text, chatbot, contact);
        
      case 'basic':
      default:
        return await this.processBasicMessage(from, text, chatbot, contact);
    }
  }

  // ü§ñ Procesador Gen√©rico (Cuando intenciones est√°n desactivadas)
  private async processGenericMessage(
    from: string,
    text: string,
    chatbot: any,
    contact?: any
  ): Promise<string> {
    try {
      console.log(`ü§ñ Procesando con GenericChatbotService (intenciones desactivadas): ${chatbot.name}`);
      const cleanPhone = from.replace('@s.whatsapp.net', '');
      
      // Usar directamente el GenericChatbotService que ya corregimos
      const response = await this.genericChatbotService.handleMessage(
        text,
        cleanPhone,
        chatbot,
        chatbot.id
      );
      
      if (response && response.trim()) {
        console.log(`‚úÖ GenericChatbotService gener√≥ respuesta: ${response.substring(0, 100)}...`);
        return response.trim();
      } else {
        console.log(`‚ö†Ô∏è GenericChatbotService no gener√≥ respuesta v√°lida`);
        return `ü§ñ Hola! Soy ${chatbot.name}. ¬øEn qu√© puedo ayudarte?`;
      }
    } catch (error) {
      console.error('‚ùå Error en processGenericMessage:', error);
      return `üòî Disculpa, hubo un error procesando tu mensaje.\n\n` +
             `Por favor, intenta de nuevo o contacta al soporte t√©cnico.`;
    }
  }

  // üß† Procesador RAG (Sistema SaaS por defecto)
  private async processRAGMessage(
    from: string,
    text: string,
    chatbot: any,
    contact?: any
  ): Promise<string> {
    try {
      const config = chatbot?.chatbotConfig || {};
      const isAIFirst = config.aiFirst === true || config.forceAIProcessing === true;
      
      console.log(`üß† Procesando con sistema RAG para chatbot: ${chatbot.name}`);
      console.log(`üéØ Modo IA First: ${isAIFirst} (ignora intenciones preconfiguradas)`);
      
      // Verificar si el servicio RAG est√° disponible
      if (!this.ragService) {
        console.log('‚ö†Ô∏è Servicio RAG no est√° disponible');
        
        // Si es AI First y no hay RAG, usar DeepSeek directamente
        if (isAIFirst && this.deepSeekService && this.deepSeekService.isServiceConfigured()) {
          console.log('üîÑ AI First sin RAG: Usando DeepSeek directamente');
          try {
            const systemPrompt = config.systemPrompt || `Eres un asistente virtual inteligente llamado ${chatbot.name}. Proporciona respuestas √∫tiles y precisas.`;
            const aiResponse = await this.deepSeekService.generateChatbotResponse(text, systemPrompt, []);
            
            if (aiResponse && aiResponse.trim()) {
              console.log(`‚úÖ DeepSeek directo gener√≥ respuesta para AI First`);
              return aiResponse.trim();
            }
          } catch (aiError) {
            console.error('‚ùå Error en DeepSeek directo:', aiError);
          }
        }
        
        return `ü§ñ Sistema de respuestas inteligentes no disponible en este momento.\n\n` +
               `Por favor, intenta de nuevo m√°s tarde o contacta al soporte t√©cnico.`;
      }

      // Procesar consulta con RAG
      console.log(`üîç Ejecutando consulta RAG: "${text}"`);
      const response = await this.ragService.simpleQuery(text, chatbot.id);
      
      if (response.success && response.data.answer) {
        console.log(`‚úÖ RAG gener√≥ respuesta exitosamente para "${text}"`);
        return response.data.answer;
      } else {
        console.log(`‚ö†Ô∏è RAG no encontr√≥ respuesta relevante para "${text}"`);
        
        // Si es AI First, intentar DeepSeek directo como fallback
        if (isAIFirst && this.deepSeekService && this.deepSeekService.isServiceConfigured()) {
          console.log('üîÑ AI First fallback: Usando DeepSeek sin RAG');
          try {
            const systemPrompt = config.systemPrompt || 
              `Eres un asistente virtual inteligente llamado ${chatbot.name}. 
              
              Proporciona respuestas √∫tiles, precisas y contextualmente relevantes. 
              Mant√©n un tono profesional pero amigable.
              
              Si no tienes informaci√≥n espec√≠fica sobre lo que se pregunta, s√© honesto y ofrece alternativas o sugiere contactar directamente.
              
              Responde siempre en espa√±ol de manera natural e inteligente.`;
              
            const aiResponse = await this.deepSeekService.generateChatbotResponse(text, systemPrompt, []);
            
            if (aiResponse && aiResponse.trim()) {
              console.log(`‚úÖ DeepSeek fallback gener√≥ respuesta para AI First`);
              return aiResponse.trim();
            }
          } catch (aiError) {
            console.error('‚ùå Error en DeepSeek fallback:', aiError);
          }
        }
        
        // Fallback final: respuesta b√°sica personalizada seg√∫n configuraci√≥n
        const fallbackMessage = isAIFirst 
          ? `üß† Hola! Soy ${chatbot.name}, tu asistente inteligente.\n\n` +
            `No tengo informaci√≥n espec√≠fica sobre "${text}" en este momento, pero estoy aqu√≠ para ayudarte.\n\n` +
            `¬øPodr√≠as darme m√°s detalles o reformular tu pregunta?`
          : `ü§ñ Hola! Soy el asistente virtual de ${chatbot.name || 'nuestra empresa'}.\n\n` +
            `No encontr√© informaci√≥n espec√≠fica sobre "${text}" en mi base de conocimiento.\n\n` +
            `¬øPodr√≠as reformular tu pregunta o consultar sobre:\n` +
            `‚Ä¢ Horarios de atenci√≥n\n` +
            `‚Ä¢ Servicios disponibles\n` +
            `‚Ä¢ Informaci√≥n general\n` +
            `‚Ä¢ Contacto y ubicaci√≥n`;
        
        return fallbackMessage;
      }
    } catch (error) {
      console.error('‚ùå Error en processRAGMessage:', error);
      return `üòî Disculpa, hubo un error procesando tu consulta.\n\n` +
             `Por favor, intenta de nuevo o contacta al soporte t√©cnico.`;
    }
  }

  // üõçÔ∏è Procesador Valery (E-commerce)
  private async processValeryMessage(
    from: string,
    text: string,
    chatbot: any,
    contact?: any
  ): Promise<string> {
    try {
      // Solo usar ValeryChatbotService si est√° disponible y es tipo 'valery' o 'ecommerce'
      if (this.valeryChatbotService) {
        console.log(`üõçÔ∏è Procesando con ValeryChatbotService para chatbot tipo "valery": ${chatbot.name}`);
        const cleanPhone = from.replace('@s.whatsapp.net', '');
        const response = await this.valeryChatbotService.handleMessage(text, cleanPhone, chatbot.id);
        return response || 'Lo siento, no pude procesar tu mensaje en este momento.';
      } else {
        console.log('‚ö†Ô∏è ValeryChatbotService no est√° disponible');
        return `üõçÔ∏è Sistema de e-commerce no disponible en este momento.\n\n` +
               `Este chatbot est√° configurado como tipo "valery" pero el servicio avanzado no est√° activo.\n` +
               `Contacta al administrador para activar las funciones de e-commerce.`;
      }
    } catch (error) {
      console.error('‚ùå Error en processValeryMessage:', error);
      return `üòî Disculpa, hubo un error procesando tu mensaje.\n\n` +
             `Por favor, intenta de nuevo o contacta al soporte t√©cnico.`;
    }
  }

  // üéß Procesador Servicio al Cliente
  private async processCustomerServiceMessage(
    from: string,
    text: string,
    chatbot: any,
    contact?: any
  ): Promise<string> {
    try {
      this.logger.log(`üéß Procesando mensaje de servicio al cliente: "${text}"`);
      
      // Obtener configuraci√≥n del chatbot
      const chatbotConfig = this.safeParseConfig(chatbot?.chatbotConfig) || {};
      const systemPrompt = chatbotConfig.systemPrompt || this.getDefaultCustomerServicePrompt(chatbot?.name);
      
      this.logger.log(`üìù Usando prompt de farmacia especializado: ${systemPrompt.substring(0, 100)}...`);
      
      // Usar DeepSeek IA para generar respuesta inteligente
      if (this.deepSeekService && this.deepSeekService.isServiceConfigured()) {
        try {
          this.logger.log(`üß† Llamando a DeepSeek con prompt especializado...`);
          const aiResponse = await this.deepSeekService.generateChatbotResponse(
            text,
            systemPrompt,
            []
          );
          
          if (aiResponse && aiResponse.trim()) {
            this.logger.log(`‚úÖ Respuesta DeepSeek generada: ${aiResponse.substring(0, 100)}...`);
            return aiResponse.trim();
          } else {
            this.logger.warn(`‚ö†Ô∏è DeepSeek no disponible o respuesta vac√≠a`);
          }
        } catch (aiError) {
          this.logger.warn(`‚ö†Ô∏è Error DeepSeek, usando fallback: ${aiError.message}`);
        }
      } else {
        this.logger.warn(`‚ö†Ô∏è DeepSeekService no est√° disponible o configurado`);
      }
      
      // Fallback: usar BasicChatbotService con configuraci√≥n del chatbot
      this.logger.log(`üîÑ Fallback: usando BasicChatbotService`);
      const result = await this.basicChatbotService.handleMessage(text, from, null, chatbot);
      
      if (result && result.response) {
        return result.response;
      }
      
      // Fallback final
      return 'üéß Hola! Soy tu asistente especializado en farmacia. ¬øC√≥mo puedo ayudarte?';
      
    } catch (error) {
      this.logger.error(`‚ùå Error en processCustomerServiceMessage: ${error.message}`);
      return 'üéß Hola! Soy tu asistente especializado en farmacia. ¬øC√≥mo puedo ayudarte?';
    }
  }

  /**
   * Obtiene prompt por defecto para servicio al cliente de farmacia
   */
  private getDefaultCustomerServicePrompt(chatbotName: string): string {
    return `Eres un especialista en servicio al cliente de farmacia altamente capacitado llamado ${chatbotName || 'FarmabienBot'}. Tu misi√≥n es resolver consultas sobre medicamentos, atender preguntas sobre servicios de farmacia y brindar soporte especializado de manera eficiente y emp√°tica.

Caracter√≠sticas de tu personalidad:
- Emp√°tico y comprensivo con las necesidades de salud de los clientes
- Profesional pero amigable en el trato
- Conocedor de medicamentos b√°sicos y servicios de farmacia
- Eficiente en resoluci√≥n de problemas
- Siempre dispuesto a ayudar

Servicios que ofreces:
- Informaci√≥n sobre medicamentos disponibles
- Consultas sobre horarios de atenci√≥n
- Servicios de delivery a domicilio
- Informaci√≥n sobre ubicaci√≥n y contacto
- Orientaci√≥n sobre productos de farmacia
- Escalaci√≥n para consultas m√©dicas complejas

Instrucciones espec√≠ficas:
- Responde de manera c√°lida y profesional
- Si no tienes informaci√≥n espec√≠fica, indica que pueden contactar directamente
- Para consultas m√©dicas complejas, recomienda consultar con un profesional
- Mant√©n respuestas concisas pero informativas
- Usa emojis apropiados para farmacia (üíä, üè•, üìû, etc.)

Responde siempre en espa√±ol de manera natural y √∫til.`;
  }

  // ‚ÑπÔ∏è Procesador Informativo Inteligente (IA-First)
  private async processInformationalMessage(
    from: string,
    text: string,
    chatbot: any,
    contact?: any
  ): Promise<string> {
    try {
      this.logger.log(`‚ÑπÔ∏è Procesando mensaje informativo con IA: "${text}"`);
      
      // Obtener configuraci√≥n rica del chatbot
      const chatbotConfig = this.safeParseConfig(chatbot?.chatbotConfig) || {};
      const prompts = chatbotConfig.customPrompts || {};
      
      // PASO 1: IA ANALIZA LA INTENCI√ìN Y GENERA RESPUESTA CONTEXTUAL
      if (this.deepSeekService && this.deepSeekService.isServiceConfigured()) {
        try {
          this.logger.log(`üß† Usando IA para an√°lisis de intenci√≥n y respuesta...`);
          
          // Crear prompt especializado para an√°lisis de intenciones
          const intentAnalysisPrompt = this.buildIntelligentIntentPrompt(chatbot, chatbotConfig, prompts);
          
          const aiResponse = await this.deepSeekService.generateChatbotResponse(
            text,
            intentAnalysisPrompt,
            []
          );
          
          if (aiResponse && aiResponse.trim()) {
            this.logger.log(`‚úÖ Respuesta IA inteligente generada: ${aiResponse.substring(0, 100)}...`);
            return aiResponse.trim();
          } else {
            this.logger.warn(`‚ö†Ô∏è IA no gener√≥ respuesta v√°lida`);
          }
        } catch (aiError) {
          this.logger.warn(`‚ö†Ô∏è Error en IA inteligente: ${aiError.message}`);
        }
      } else {
        this.logger.warn(`‚ö†Ô∏è DeepSeekService no disponible, usando fallback manual`);
      }
      
      // PASO 2: FALLBACK MANUAL SOLO SI IA FALLA COMPLETAMENTE
      return this.processManualIntentFallback(text, prompts, chatbot);
      
    } catch (error) {
      this.logger.error(`‚ùå Error en processInformationalMessage: ${error.message}`);
      return `‚ÑπÔ∏è Hola! Soy el asistente de ${chatbot?.name || 'nuestro negocio'}. ¬øEn qu√© puedo ayudarte?`;
    }
  }

  /**
   * üß† Construye un prompt inteligente para an√°lisis de intenciones SaaS
   */
  private buildIntelligentIntentPrompt(chatbot: any, chatbotConfig: any, prompts: any): string {
    const businessName = chatbot?.name || 'nuestro negocio';
    const businessType = this.detectBusinessType(chatbotConfig);
    const customIntents = chatbotConfig.intents || [];
    
    // Construir secci√≥n de intenciones personalizadas del cliente
    let intentSection = '';
    if (customIntents.length > 0) {
      intentSection = `üéØ INTENCIONES PERSONALIZADAS DEL CLIENTE:
${customIntents.filter(intent => intent.enabled !== false).map(intent => 
  `‚Ä¢ ${intent.name.toUpperCase()}: ${intent.response}
   Keywords: ${intent.keywords?.join(', ') || 'No definidas'}
   Ejemplos: ${intent.examples?.map(ex => `"${ex}"`).join(', ') || 'No definidos'}`
).join('\n')}

üìã INSTRUCCIONES PARA INTENCIONES PERSONALIZADAS:
- SIEMPRE prioriza las intenciones personalizadas sobre las gen√©ricas
- Usa EXACTAMENTE la respuesta definida para cada intenci√≥n
- Si detectas keywords o patrones similares a los ejemplos, clasifica esa intenci√≥n
- Personaliza la respuesta con el contexto espec√≠fico del mensaje
- Combina m√∫ltiples intenciones si es relevante

`;
    } else {
      intentSection = `üéØ INTENCIONES GEN√âRICAS (SIN PERSONALIZACI√ìN):
‚Ä¢ HORARIOS: Preguntas sobre horarios de atenci√≥n, d√≠as de trabajo, apertura/cierre
‚Ä¢ UBICACI√ìN: Consultas sobre direcci√≥n, localizaci√≥n, c√≥mo llegar, referencias
‚Ä¢ CONTACTO: N√∫meros telef√≥nicos, redes sociales, formas de comunicaci√≥n
‚Ä¢ SERVICIOS: Qu√© ofrecen, informaci√≥n general del negocio
‚Ä¢ PRECIOS: Costos, tarifas, m√©todos de pago
‚Ä¢ DISPONIBILIDAD: Stock, productos disponibles, existencias
‚Ä¢ RESERVAS: Hacer citas, reservar mesas, agendar servicios
‚Ä¢ DELIVERY: Env√≠os a domicilio, zonas de cobertura, costos
‚Ä¢ PROMOCIONES: Ofertas, descuentos, promociones especiales
‚Ä¢ POL√çTICAS: Garant√≠as, devoluciones, t√©rminos y condiciones
‚Ä¢ SALUDO: Saludos iniciales, presentaciones, bienvenidas

`;
    }
    
    return `Eres el asistente inteligente de ${businessName}, especializado en ${businessType}. Tu misi√≥n es entender las intenciones del cliente usando la configuraci√≥n personalizada y proporcionar respuestas √∫tiles y precisas.

${intentSection}

üìö INFORMACI√ìN ESPEC√çFICA DEL NEGOCIO:
${chatbotConfig.knowledgeBase || 'Informaci√≥n no disponible'}

üé≠ PERSONALIDAD Y CONTEXTO:
${chatbotConfig.systemPrompt || prompts.system || 'Mant√©n un tono profesional y amigable'}

üë§ CONTEXTO DE USUARIOS:
${chatbotConfig.userContext || prompts.userContext || 'Los usuarios buscan informaci√≥n clara y r√°pida'}

üìã INSTRUCCIONES ESPEC√çFICAS:
${chatbotConfig.specificInstructions || prompts.instructions || 'Responde de manera clara y √∫til'}

üîß PROTOCOLO DE RESPUESTA SAAS:
1. IDENTIFICA la intenci√≥n usando las definiciones personalizadas del cliente
2. PRIORIZA siempre las intenciones custom sobre las gen√©ricas
3. USA la respuesta base definida por el cliente para esa intenci√≥n
4. PERSONALIZA la respuesta con el contexto espec√≠fico del mensaje del usuario
5. INCLUYE informaci√≥n adicional del knowledge base si es relevante
6. ESTRUCTURA la respuesta de manera clara y organizada
7. USA emojis apropiados para hacer la respuesta m√°s amigable
8. OFRECE ayuda adicional si es apropiado

‚ö†Ô∏è REGLAS SAAS IMPORTANTES:
- Las intenciones del cliente SIEMPRE tienen prioridad sobre las gen√©ricas
- Si no hay intenci√≥n personalizada que coincida, usa las gen√©ricas como fallback
- Mant√©n respuestas concisas pero completas (m√°ximo 3 p√°rrafos)
- Usa siempre la informaci√≥n actualizada del negocio
- Personaliza seg√∫n el tipo de consulta espec√≠fica
- Si la consulta es ambigua, pregunta para aclarar

RESPONDE al mensaje del cliente usando el sistema SaaS de intenciones personalizadas:`;
  }

  /**
   * üîç Detecta el tipo de negocio basado en la configuraci√≥n
   */
  private detectBusinessType(chatbotConfig: any): string {
    const chatbotType = chatbotConfig.chatbotType || 'informativo';
    const knowledgeBase = (chatbotConfig.knowledgeBase || '').toLowerCase();
    const businessName = (chatbotConfig.businessName || '').toLowerCase();
    
    // Detectar por tipo de chatbot
    if (chatbotType === 'ecommerce') return 'comercio electr√≥nico y ventas';
    if (chatbotType === 'servicio_cliente') return 'servicio al cliente y soporte';
    if (chatbotType === 'lead_generation') return 'generaci√≥n de leads y contactos';
    
    // Detectar por contenido de la base de conocimientos
    if (knowledgeBase.includes('pizza') || knowledgeBase.includes('restaurante') || knowledgeBase.includes('comida')) {
      return 'restaurante y servicios gastron√≥micos';
    }
    if (knowledgeBase.includes('farmacia') || knowledgeBase.includes('medicamentos') || knowledgeBase.includes('salud')) {
      return 'farmacia y servicios de salud';
    }
    if (knowledgeBase.includes('tienda') || knowledgeBase.includes('productos') || knowledgeBase.includes('venta')) {
      return 'tienda y servicios comerciales';
    }
    if (knowledgeBase.includes('consulta') || knowledgeBase.includes('cita') || knowledgeBase.includes('servicio')) {
      return 'servicios profesionales y consultor√≠a';
    }
    
    return 'servicios informativos y atenci√≥n al cliente';
  }

  /**
   * üîÑ Fallback manual solo si la IA falla completamente
   */
  private processManualIntentFallback(text: string, prompts: any, chatbot: any): string {
    const lowerText = text.toLowerCase();
    
    // Intenciones b√°sicas como √∫ltimo recurso
    if (lowerText.includes('horario') || lowerText.includes('hora') || lowerText.includes('abierto') || lowerText.includes('cerrado')) {
      return prompts.hours || 'üïí Para informaci√≥n sobre horarios, por favor contacta directamente con nosotros.';
    }
    
    if (lowerText.includes('ubicacion') || lowerText.includes('direcci√≥n') || lowerText.includes('donde') || lowerText.includes('localizaci√≥n')) {
      return prompts.location || 'üìç Para informaci√≥n sobre nuestra ubicaci√≥n, por favor contacta directamente con nosotros.';
    }
    
    if (lowerText.includes('telefono') || lowerText.includes('contacto') || lowerText.includes('llamar') || lowerText.includes('whatsapp')) {
      return prompts.contact || 'üìû Para informaci√≥n de contacto, por favor escr√≠benos directamente.';
    }
    
    if (lowerText.includes('precio') || lowerText.includes('costo') || lowerText.includes('cuanto') || lowerText.includes('pago')) {
      return prompts.pricing || 'üí∞ Para informaci√≥n sobre precios, por favor consulta directamente con nosotros.';
    }
    
    // Respuesta gen√©rica final
    return prompts.welcome || `‚ÑπÔ∏è ¬°Hola! Soy el asistente de ${chatbot?.name || 'nuestro negocio'}. Puedo ayudarte con informaci√≥n sobre nuestros servicios. ¬øQu√© necesitas saber?`;
  }

  // üíº Procesador Generaci√≥n de Leads
  private async processLeadCaptureMessage(
    from: string,
    text: string,
    chatbot: any,
    contact?: any
  ): Promise<string> {
    const config = chatbot?.chatbotConfig || {};
    const prompts = config.customPrompts || {};
    
    // Aqu√≠ implementar√≠as l√≥gica de captura de leads
    // Por ejemplo, detectar si es un nombre, email, etc.
    
    return prompts.welcome || 'üíº Hola! Me gustar√≠a conocerte mejor. ¬øCu√°l es tu nombre?';
  }

  // üé® Procesador Personalizado
  private async processCustomMessage(
    from: string,
    text: string,
    chatbot: any,
    contact?: any
  ): Promise<string> {
    const config = chatbot?.chatbotConfig || {};
    const prompts = config.customPrompts || {};
    
    // Aqu√≠ el usuario podr√≠a definir su propia l√≥gica
    return prompts.welcome || 'Chatbot personalizado activo.';
  }

  // üîß Procesador B√°sico
  private async processBasicMessage(
    from: string,
    text: string,
    chatbot: any,
    contact?: any
  ): Promise<string> {
    try {
      // Usar el nuevo BasicChatbotService que maneja prompts personalizados
      const result = await this.basicChatbotService.handleMessage(text, from, null, chatbot);
      
      // Extraer solo la respuesta del objeto complejo
      if (result && typeof result === 'object' && result.response) {
        return result.response;
      }
      
      // Si es una string directa, devolverla
      if (typeof result === 'string') {
        return result;
      }
      
      // Fallback si no hay respuesta v√°lida
      return 'Hola! ¬øEn qu√© puedo ayudarte?';
    } catch (error) {
      this.logger.error(`‚ùå Error en processBasicMessage: ${error.message}`);
      return 'Disculpa, hubo un error procesando tu mensaje. Intenta nuevamente.';
    }
  }

  // üìù Modificar el m√©todo principal handleMessage
  async handleMessage(data: any): Promise<void> {
    try {
      console.log('üì• Procesando mensaje WhatsApp:', JSON.stringify(data, null, 2));

      const { instanceId, from, text, messageType } = data;

      if (!from || !text) {
        console.log('‚ö†Ô∏è Mensaje incompleto, ignorando');
        return;
      }

      // Buscar chatbot por instanceId
      const chatbot = await this.findChatbotByInstance(instanceId);
      if (!chatbot) {
        console.log(`‚ùå No se encontr√≥ chatbot para instanceId: ${instanceId}`);
        return;
      }

      console.log(`ü§ñ Chatbot encontrado: ${chatbot.name} (ID: ${chatbot.id})`);

      // ‚ú® NUEVA L√ìGICA: Determinar procesador seg√∫n tipo
      const processor = await this.determineProcessor(chatbot);
      console.log(`üîß Procesador seleccionado: ${processor}`);

      // Procesar mensaje seg√∫n el tipo
      const response = await this.processMessageByType(processor, from, text, chatbot);

      // Enviar respuesta
      if (response) {
        const cleanPhone = from.replace('@s.whatsapp.net', '');
        await this.sendMessage(cleanPhone, response, chatbot.id);
        console.log(`‚úÖ Respuesta enviada: ${response}`);
      }

    } catch (error) {
      console.error('‚ùå Error en handleMessage:', error);
    }
  }

  /**
   * Procesa un mensaje sin enviarlo a WhatsApp (para pruebas)
   * @param phoneNumber N√∫mero de tel√©fono del usuario
   * @param message Mensaje del usuario
   * @param chatbotId ID del chatbot
   * @returns Respuesta procesada
   */
  async processMessageWithoutSending(
    phoneNumber: string,
    message: string,
    chatbotId: string
  ): Promise<string> {
    try {
      this.logger.log(`üß™ Procesando mensaje de prueba para chatbot ${chatbotId}`);
      
      // Verificar si el chatbot existe
      const chatbot = await this.chatbotInstanceRepository.findOne({
        where: { id: chatbotId },
        relations: ['organization'] // Incluir relaciones necesarias
      });
      
      if (!chatbot) {
        throw new Error(`Chatbot no encontrado: ${chatbotId}`);
      }
      
      // Determinar el tipo de chatbot
      let chatbotType = 'basic';
      try {
        const chatbotConfig = typeof chatbot.chatbotConfig === 'string' 
          ? JSON.parse(chatbot.chatbotConfig) 
          : chatbot.chatbotConfig;
          
        chatbotType = chatbotConfig?.type || 'basic';
        this.logger.log(`üß™ Tipo de chatbot detectado: ${chatbotType}`);
      } catch (error) {
        this.logger.warn(`‚ö†Ô∏è Error obteniendo tipo de chatbot: ${error.message}`);
      }
      
      // Usar ValeryChatbotService para chatbots de tipo ecommerce (mejor manejo de comandos)
      if (chatbotType === 'ecommerce' && this.valeryChatbotService) {
        this.logger.log(`üß™ Usando ValeryChatbotService para chatbot ecommerce`);
        const response = await this.valeryChatbotService.handleMessage(
          message,
          phoneNumber,
          chatbotId
        );
        return response;
      }
      
      // Para otros tipos, usar el servicio gen√©rico
      this.logger.log(`üß™ Usando GenericChatbotService para tipo: ${chatbotType}`);
      const response = await this.genericChatbotService.handleMessage(
        message,
        phoneNumber,
        chatbot,
        chatbotId
      );
      
      this.logger.log(`‚úÖ Mensaje procesado con √©xito, respuesta generada.`);
      return response;
    } catch (error) {
      this.logger.error(`‚ùå Error procesando mensaje de prueba: ${error.message}`);
      throw error;
    }
  }

  async handleWebhookPayload(payload: any) {
    try {
      this.logger.log(`üì© Recibido webhook payload: ${JSON.stringify(payload).substring(0, 200)}...`);
      
      // Obtener el instanceId del payload
      const instanceId = payload?.instanceId || payload?.instance_id;
      
      if (!instanceId) {
        this.logger.error('‚ùå No se pudo determinar el instanceId en el payload');
        return;
      }
      
      // Buscar el chatbot asociado a esta instancia
      const chatbot = await this.findChatbotByInstance(instanceId);
      
      if (!chatbot) {
        this.logger.error(`‚ùå No se encontr√≥ chatbot para instanceId: ${instanceId}`);
        return;
      }
      
      // Extraer el mensaje del payload
      const message = this.extractMessageFromPayload(payload);
      
      if (!message) {
        this.logger.warn('‚ö†Ô∏è No se pudo extraer un mensaje v√°lido del payload');
        return;
      }
      
      this.logger.log(`üì© Mensaje extra√≠do: ${message.body} de ${message.from}`);
      
      // Procesar con ChatbotFactoryCleanService
      const chatbotService = await this.chatbotFactoryCleanService.createChatbotService(chatbot.id, chatbot);
      const response = await chatbotService.handleMessage(
        message.body,
        message.from.replace('@s.whatsapp.net', ''),
        chatbot,
        chatbot.id
      );
      
      if (response) {
        // Enviar respuesta usando el m√©todo sendMessage
        await this.sendMessage(
          message.from.replace('@s.whatsapp.net', ''),
          response,
          chatbot.id
        );
        this.logger.log(`‚úÖ Respuesta enviada a ${message.from}: ${response.substring(0, 50)}...`);
      }
    } catch (error) {
      this.logger.error(`‚ùå Error en handleWebhookPayload: ${error.message}`);
    }
  }
  
  /**
   * Extraer un objeto WhatsAppMessage del payload del webhook
   * Este m√©todo es adaptable seg√∫n el formato de cada proveedor
   */
  private extractMessageFromPayload(payload: any): WhatsAppMessage | null {
    try {
      // Estructura b√°sica para Evolution API
      if (payload?.data?.key?.remoteJid) {
        return {
          from: payload.data.key.remoteJid,
          to: payload.data.key.fromMe ? payload.data.key.remoteJid : payload.instance_id,
          body: payload.data.message?.conversation || 
                payload.data.message?.extendedTextMessage?.text || 
                'Media message',
          timestamp: new Date(),
          type: 'text',
          instanceId: payload.instance_id
        };
      }
      
      // Estructura para otros proveedores
      if (payload?.message && payload?.from) {
        return {
          from: payload.from,
          to: payload.to || payload.instance_id,
          body: payload.message,
          timestamp: new Date(),
          type: 'text',
          instanceId: payload.instance_id
        };
      }
      
      return null;
    } catch (error) {
      this.logger.error(`‚ùå Error extrayendo mensaje: ${error.message}`);
      return null;
    }
  }
} 